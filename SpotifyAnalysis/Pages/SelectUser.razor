@page "/"

@using SpotifyAnalysis.Data.SpotifyAPI
@using SpotifyAnalysis.Data.DTO
@using SpotifyAnalysis.Data.Database
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.RegularExpressions

@implements IDisposable

@inject IDialogService DialogService
@inject SpotifyModuleFactory spotifyModuleFactory;
@inject ProtectedLocalStorage localStorage;
@inject ScopedData data;
@inject SpotifyClientScoped clientScoped;

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudStack Justify=Justify.SpaceEvenly Style="height: 80vh">
        <MudStack AlignItems=AlignItems.Center>
            <MudStack Row AlignItems=AlignItems.Center Style="width: 100%;">
                <MudForm @ref="form" Class="flex-grow-1">
                    <MudTextField @bind-Value="userInput" Label="User ID"
                                  Required="true" RequiredError="User ID or user link is required."
                                  Validation=ValidateInput OnlyValidateIfDirty="true"
                                  Variant="Variant.Outlined" FullWidth Margin="Margin.Dense" />
                </MudForm>
                <HelpButton Title="How to get a user ID or URL?">
                    <HelpUserID />
                </HelpButton>
            </MudStack>
            <MudStack Row>
                @if (clientScoped?.UserDTO?.ID is not null) {
                    <MudButton Variant=Variant.Outlined Class="rounded-pill" Style="width: 150px" OnClick=GetMyUserID>Get my user ID</MudButton>
                }
                <MudButton Variant=Variant.Outlined Class="rounded-pill" Style="width: 150px" OnClick=TrySwitchUserAsync>Select User</MudButton>
            </MudStack>
        </MudStack>

        <MudStack AlignItems=AlignItems.Center Style="height:50px;">
            <MudProgressLinear Color="Color.Primary" Value="@loadValue" />
            <MudText Typo="Typo.h6">@loadMessage</MudText>
        </MudStack>

        <MudPaper>
            <MudStack Row Justify=Justify.SpaceBetween AlignItems=AlignItems.Center Class="pa-4" >
                <MudAvatar Size="Size.Large">
                    <MudImage Src=@(selectedUser?.ImageL ?? StaticResourceMap.UnknownUser) />
                </MudAvatar>
                <div>
                    <MudText Typo="Typo.h6">@selectedUser.Name</MudText>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@selectedUser.ID</MudText>
                </div>
                <OpenInSpotify Id=@selectedUser.ID ResType=OpenInSpotify.ResourceType.User Disabled=@(string.IsNullOrEmpty(selectedUser.ID)) />
            </MudStack>
        </MudPaper>
    </MudStack>
</MudContainer>


@code {
    MudForm form;
    DataFetch dataFetch;
    UserDTO selectedUser;
    Storage<string> selectedUserIDStorage;
    string userInput;
    ushort loadValue = 0;
    string loadMessage;


    protected override void OnInitialized() {
        base.OnInitialized();
        clientScoped.UserChanged += OnUserChanged;
        selectedUser = data.UserDTO ?? new UserDTO();
        selectedUserIDStorage = new(nameof(selectedUserIDStorage), localStorage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            userInput = await selectedUserIDStorage.Get();
            if (!string.IsNullOrEmpty(userInput))
                StateHasChanged();
        }
    }

    async void OnUserChanged(object _) {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose() {
        clientScoped.UserChanged -= OnUserChanged;
    }

    private void UpdateProgressBar(float value, string message) {
        loadValue = (ushort)value;
        loadMessage = message ?? loadMessage;
        InvokeAsync(StateHasChanged);
    }

    UserDTO userFromAPI;
    private async Task<string> ValidateInput(string input) {
        var id = SanitizeUserID(input);
        if (string.IsNullOrWhiteSpace(id))
            return "Input must be either a User ID, URI or URL";

        var spotifyModule = spotifyModuleFactory.GetModule();
        dataFetch = DataFetchFactory.GetDefault(spotifyModule, UpdateProgressBar);

        var publicUser = await spotifyModule.GetUserProfile(id);
        if (publicUser is null)
            return "User not found, possible incorrect ID";

        await selectedUserIDStorage.Set(id);
        userFromAPI = publicUser.ToUserDTO();
        return null;
    }

    void GetMyUserID() {
        userInput = clientScoped.UserDTO.ID;
        form.ResetValidation();
    }

    async Task TrySwitchUserAsync() {
        // TODO return if new user the same as the old one
        await form.Validate();
        if (!form.IsValid)
            return;

        // Get user confirmation
        var response = await OpenDialogAsync(userFromAPI);
        if (response.Canceled)
            return;

        selectedUser = userFromAPI;
        StateHasChanged();

        // Get user data if user not in DB or not updated for a long time
        UpdateProgressBar(03, "Processing user data");
        using var db = new SpotifyContext();
        var userDTO = await db.Users
            .FirstOrDefaultAsync(u => u.ID == selectedUser.ID);

        if (userDTO is null || MinutesSince(userDTO.Updated) > 15)
            await dataFetch.GetData(selectedUser.ID);

        UpdateProgressBar(95, null);
        data.UserDTO = await GetUserDTOFromDB(selectedUser.ID);
        UpdateProgressBar(100, "Finished!");
    }

    static readonly Regex URLRegex = new Regex(@"^(?:https:\/\/)?open\.spotify\.com\/user\/(\w{7,30})(?:\?.+)?$");  // https://open.spotify.com/user/11ek5k7fhea9otrb7k2ecizzb?si=01cec8557cc642f1
    static readonly Regex HrefRegex = new Regex(@"^(?:https:\/\/)?api\.spotify\.com\/v1\/users\/(\w{7,30})(?:\?.+)?$");  // https://api.spotify.com/v1/users/11ek5k7fhea9otrb7k2ecizzb
    static readonly Regex URIRegex = new Regex(@"^spotify:user:(\w{7,30})$");  // spotify:user:11ek5k7fhea9otrb7k2ecizzb
    static readonly Regex IdRegex = new Regex(@"^(\w{7,30})$");  // 11ek5k7fhea9otrb7k2ecizzb

    static readonly Regex[] patterns = [URLRegex, HrefRegex, URIRegex, IdRegex];
    static string SanitizeUserID(string input) {
        if (string.IsNullOrWhiteSpace(input))
            return null;
        input = input.Trim();
        string id;
        foreach (Regex re in patterns)
            if (!string.IsNullOrEmpty(id = re.Match(input).Groups[1]?.Value))
                return id;
        return null;
    }

    static int MinutesSince(DateTime since) => (int) DateTime.Now.Subtract(since).TotalMinutes;

    private async Task<DialogResult> OpenDialogAsync(UserDTO userDto) {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<UserSelectionDialog>{ {x => x.User, userDto } };
        var dialog = await DialogService.ShowAsync<UserSelectionDialog>("Is this the correct user?", parameters, options);
        return await dialog.Result;
    }

    private async Task<UserDTO> GetUserDTOFromDB(string userID) {
        using var db = new SpotifyContext();
        return await db.Users
            .Include(u => u.Playlists)

            .Include(u => u.Playlists)
            .ThenInclude(p => p.Tracks)
            .ThenInclude(t => t.Artists)

            .Include(u => u.Playlists)
            .ThenInclude(p => p.Tracks)
            .ThenInclude(t => t.Album)

            .FirstAsync(u => u.ID == userID);
    }
}