@page "/counter"

@using Microsoft.EntityFrameworkCore
@using SpotifyAnalysis.Data
@using SpotifyAnalysis.Data.DTO
@using SpotifyAnalysis.Data.DataAccessLayer
@using SpotifyAnalysis.Data.SpotifyAPI
@using SpotifyAPI.Web
@using System.Threading

@inject Spotify spotify;
@inject SpotifyModule spotifyModule;
@inject SpotifyContext spotifyContext;

<p>
	<label for="userId">User ID:</label>
	<input id="userId" size="30" @bind="userID" />
	<button class="btn btn-primary" @onclick="GetPlaylists">Get playlists</button>
	<button class="btn btn-primary" disabled="@(!areAnyPlaylistsSelected)" @onclick="GenerateCharts">Generate charts</button>
</p>

@if (spotify.UserData?.FullPlaylists != null) {
	<PlaylistList @ref="playlistList" Playlists="spotify.UserData.FullPlaylists" MultiSelect="true" SelectionChanged="UpdateGenerateButton"></PlaylistList>
}
<p>
	@if (artistsSongs != null) {
		<PieChart Title="Artists" Elements="artistsSongs" OnClickCallback="SelectArtist" />
		<ArtistPane Artist="@selectedArtist"></ArtistPane>
	}
	@if (genreSongs != null) {
		<PieChart Title="Genres" Elements="genreSongs" />
	}
	@if (genres != null) {
		<PieChart Title="Genres general" Elements="genres" />
	}
</p>


@code {
	private PlaylistList playlistList;

	private string userID = "11ek5k7fhea9otrb7k2ecizzb";
	private Elements artistsSongs;
	private Elements genreSongs;
	private Elements genres;

	private FullArtist selectedArtist;

	public async void GetPlaylists() {
		var userData = new UserData(userID);
		var oldTask = spotify.GetUsersPublicPlaylistsAsync(userData);
		var newTask = NewGetPlaylists();
		await newTask;

		await oldTask;
		StateHasChanged();
	}

	private async Task NewGetPlaylists() {
		// TODO optimize await order
		var allUserPlaylists = await spotifyModule.GetUsersPublicPlaylistsAsync(userID);
		// Map of all playlists the user currently has in API
		var idsPlaylistsMap = allUserPlaylists.ToDictionary(p => p.ID, p => p);

		using (var db = new SpotifyContext()) {
			// Get UserDTO from DB, create new from API if not present
			UserDTO user = await db.Users.Include(u => u.Playlists).FirstOrDefaultAsync(u => u.ID == userID);
			if (user is null) {
				user = await spotifyModule.GetUserProfile(userID);
				await db.AddAsync(user);
			}

			// Playlists in both DB and from API
			var commonPlaylists = user.Playlists.Where(p => idsPlaylistsMap.ContainsKey(p.ID));

			// Playlists which we have in DB but have been updated
			var updatedPlaylists = commonPlaylists.Where(
				c => idsPlaylistsMap[c.ID].SnapshotID != c.SnapshotID);

			// Playlists which we don't have yet
			//		Need to exclude all Playlists because one can be reffed by multiple users
			var playlists = await db.Playlists.ToListAsync();
			var allPlaylistIDs = playlists.Select(p => p.ID).ToHashSet();
			var newPlaylists = allUserPlaylists.Where(up => !allPlaylistIDs.Contains(up.ID));

			// Add new playlists
			if (newPlaylists.Any())
				user.Playlists.AddRange(newPlaylists.ToList());

			// Update the existing playlists
			if (updatedPlaylists.Any()) {
				foreach (var updatedPlaylist in updatedPlaylists) {
					var correspondingUserPlaylist = idsPlaylistsMap[updatedPlaylist.ID];

					updatedPlaylist.Name = correspondingUserPlaylist.Name;
					updatedPlaylist.SnapshotID = correspondingUserPlaylist.SnapshotID;
					updatedPlaylist.Tracks = correspondingUserPlaylist.Tracks;
					updatedPlaylist.Images = correspondingUserPlaylist.Images;

					db.Entry(updatedPlaylist).State = EntityState.Modified;
				}
			}

			// Remove the playlist we don't have anymore
			var stalePlaylists = user.Playlists.Where(p => !idsPlaylistsMap.ContainsKey(p.ID));
			if (stalePlaylists.Any())
				db.RemoveRange(stalePlaylists);
			
			await db.SaveChangesAsync();
		}
	}

	public async void GenerateCharts() {
		var n = NewGenerateCharts();
		var o = OldGenerateCharts();
		await n;
		await o;
	}

	private async Task NewGenerateCharts() {

	}

	private async Task OldGenerateCharts() {
		if (spotify.UserData.FullPlaylists == null)
			return;
		var getAllTracks = spotify.GetAllTracksAsync(playlistList.GetSelectedPlaylists());
		var allTracks = await getAllTracks;
		var getAllArtists = spotify.GetAllArtistsAsync(allTracks);
		var buildArtistsSongs = BuildArtistsAsync(allTracks);
		artistsSongs = await buildArtistsSongs;
		StateHasChanged();
		var allArtists = await getAllArtists;
		var buildGenreSongs = BuildGenresAsync(allTracks, allArtists);
		var buildGenres = BuildGenresGeneralAsync(allTracks, allArtists);
		genreSongs = await buildGenreSongs;
		StateHasChanged();
		genres = await buildGenres;
		StateHasChanged();
	}

	private async Task<Elements> BuildArtistsAsync(FullTracks allTracks) {
		Elements BuildArtists() {
			artistsSongs = new Elements();
			foreach (var track in allTracks)
				foreach (var artist in track.Artists)
					artistsSongs.Increase(new Element { Label = artist.Name, Quantity = 1 });
			return artistsSongs;
		}

		return await Task<Elements>.Run(BuildArtists);
	}

	private async Task<Elements> BuildGenresAsync(FullTracks allTracks, FullArtists allArtists) {
		Elements BuildGenres() {
			genreSongs = new Elements();
			foreach (var track in allTracks)
				foreach (var artist in track.Artists)
					foreach (var genre in allArtists[artist.Id].Genres)
						genreSongs.Increase(new Element { Label = genre, Quantity = 1 });
			return genreSongs;
		}

		return await Task<Elements>.Run(BuildGenres);
	}

	private async Task<Elements> BuildGenresGeneralAsync(FullTracks allTracks, FullArtists allArtists) {
		Elements BuildGenresGeneral() {
			var genres = new Elements();
			foreach (var track in allTracks)
				foreach (var artist in track.Artists)
					foreach (var genre in allArtists[artist.Id].Genres)
						foreach (string word in genre.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries))
							genres.Increase(new Element { Label = word, Quantity = 1 });
			string[] excludes = { "of", "and", "new" };
			foreach (var exclusion in excludes)
				genres.Extract(exclusion);
			return genres;
		}

		return await Task<Elements>.Run(BuildGenresGeneral);
	}

	private bool areAnyPlaylistsSelected;
	internal void UpdateGenerateButton(bool areAnySelected) {
		if (areAnyPlaylistsSelected != areAnySelected) {
			areAnyPlaylistsSelected = areAnySelected;
			StateHasChanged();
		}
	}

	internal void SelectArtist(string artistName) {
		selectedArtist = spotify.AllArtists.First((a) => a.Name == artistName);
		StateHasChanged();
	}
}
