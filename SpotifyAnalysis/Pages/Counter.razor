@page "/counter"

@using SpotifyAnalysis.Data
@using SpotifyAPI.Web
@using System.Threading

@inject Spotify spotify;

<p>
	<label for="userId">User ID:</label>
	<input id="userId" size="30" @bind="userID" />
	<button class="btn btn-primary" @onclick="GetPlaylists">Get playlists</button>
	<button class="btn btn-primary" disabled="@(!ChartGenerationEnabled)"  @onclick="GenerateCharts">Generate charts</button>
</p>

@if (playlists != null) {
	<PlaylistList @ref="playlistList" Playlists="playlists" MultiSelect="true"></PlaylistList>
}
<p>
	@if (artistsSongs != null) {
		<PieChart Title="Artists" Elements="artistsSongs" />
	}
	@if (genreSongs != null) {
		<PieChart Title="Genres" Elements="genreSongs" />
	}
	@if (genres != null) {
		<PieChart Title="Genres general" Elements="genres" />
	}
</p>


@code {
	private PlaylistList playlistList;

	private string? userID = "11ek5k7fhea9otrb7k2ecizzb";
	private IEnumerable<SimplePlaylist> playlists;
	private Elements artistsSongs;
	private Elements genreSongs;
	private Elements genres;
	private bool ChartGenerationEnabled;


	public async void GetPlaylists() {
		//var profile = await spotify.SpotifyClient.UserProfile.Get(user);
		var playlistsTask = spotify.SpotifyClient.Playlists.GetUsers(userID);
		playlistsTask.Wait();
		var playlistsAllTask = spotify.SpotifyClient.PaginateAll(playlistsTask.Result);
		playlistsAllTask.Wait();
		playlists = playlistsAllTask.Result;

		ChartGenerationEnabled = true;
		StateHasChanged();
	}

	public async void GenerateCharts() {
		if (playlists == null)
			return;

		FullTracks allTracks;
		FullArtists allArtists;
		var getAllTracks = GetAllTracksAsync(playlistList.GetSelectedPlaylists());
		allTracks = await getAllTracks;
		var getAllArtists = GetAllArtistsAsync(allTracks);
		var buildArtistsSongs = BuildArtistsAsync(allTracks);
		artistsSongs = await buildArtistsSongs;
		StateHasChanged();
		allArtists = await getAllArtists;
		var buildGenreSongs = BuildGenresAsync(allTracks, allArtists);
		var buildGenres = BuildGenresGeneralAsync(allTracks, allArtists);
		genreSongs = await buildGenreSongs;
		StateHasChanged();
		genres = await buildGenres;
		StateHasChanged();
	}

	private async Task<Elements> BuildArtistsAsync(FullTracks allTracks) {
		Elements BuildArtists() {
			artistsSongs = new Elements();
			foreach (var track in allTracks)
				foreach (var artist in track.Artists)
					artistsSongs.Increase(new Element { Label = artist.Name, Quantity = 1 });
			return artistsSongs;
		}

		return await Task<Elements>.Run(BuildArtists);
	}

	private async Task<Elements> BuildGenresAsync(FullTracks allTracks, FullArtists allArtists) {
		Elements BuildGenres() {
			genreSongs = new Elements();
			foreach (var track in allTracks)
				foreach (var artist in track.Artists) 
					foreach (var genre in allArtists[artist.Id].Genres)
						genreSongs.Increase(new Element { Label = genre, Quantity = 1 });
			return genreSongs;
		}

		return await Task<Elements>.Run(BuildGenres);
	}

	private async Task<Elements> BuildGenresGeneralAsync(FullTracks allTracks, FullArtists allArtists) {
		Elements BuildGenresGeneral() {
			var genres = new Elements();
			foreach (var track in allTracks)
				foreach (var artist in track.Artists)
					foreach (var genre in allArtists[artist.Id].Genres)
						foreach (string word in genre.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries))
							genres.Increase(new Element { Label = word, Quantity = 1 });
			string[] excludes = { "of", "and", "new" };
			foreach (var exclusion in excludes)
				genres.Extract(exclusion);
			return genres;
		}

		return await Task<Elements>.Run(BuildGenresGeneral);
	}

	private async Task<FullTracks> GetAllTracksAsync(IEnumerable<SimplePlaylist> playlists) {
		IList<FullTrack> allTracks = new List<FullTrack>();
		foreach (var playlist in playlistList.GetSelectedPlaylists()) {
			var tracksTask = await spotify.SpotifyClient.Playlists.GetItems(playlist.Id);
			var tracksAllTask = await spotify.SpotifyClient.PaginateAll(tracksTask);
			foreach (var song in tracksAllTask)
				allTracks.Add(song.Track as FullTrack);
		}
		return allTracks.ToKeyedCollection();
	}

	private async Task<FullArtists> GetAllArtistsAsync(IEnumerable<FullTrack> fullTracks) {
		var artistsSet = new HashSet<SimpleArtist>();
		foreach (var track in fullTracks)
			foreach (var artist in track.Artists)
				if (!artistsSet.Contains(artist))
					artistsSet.Add(artist);

		int size = 8;
		var tasks = new List<Task<ArtistsResponse>>();
		var chunks = artistsSet.Select((s, i) => artistsSet.Skip(i * size).Take(size)).Where(a => a.Any());
		foreach (var chunk in chunks) {
			var task = spotify.SpotifyClient.Artists.GetSeveral(new ArtistsRequest(chunk.Select(c => c.Id).ToList()));
			tasks.Add(task);
			await Task.Delay(100);
		}
		await Task.WhenAll(tasks.ToArray());
		return tasks.SelectMany(t => t.Result.Artists).ToKeyedCollection();
	}
}
