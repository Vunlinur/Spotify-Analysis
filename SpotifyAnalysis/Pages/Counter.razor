@page "/counter"

@using SpotifyAnalysis.Data
@using SpotifyAPI.Web
@using System.Threading

@inject Spotify spotify;

<p>
	<label for="userId">User ID:</label>
	<input id="userId" size="30" @bind="userID" />
	<button class="btn-primary" @onclick="GetPlaylists">Get playlists</button>
	<button class='@playlists == null ? "disabled" : "btn-primary"' @onclick="GenerateCharts">Generate charts</button>
</p>

@if (playlists != null) {
	<PlaylistList @ref="playlistList" Playlists="playlists"></PlaylistList>
}
<p>
	@if (artistsSongs != null) {
		<PieChart Title="Artists" Elements="artistsSongs" />
	}
	@if (genreSongs != null) {
		<PieChart Title="Genres" Elements="genreSongs" />
	}
</p>


@code {
	private PlaylistList playlistList;

	private string? userID = "11ek5k7fhea9otrb7k2ecizzb";
	private IEnumerable<SimplePlaylist> playlists;
	private Elements artistsSongs;
	private Elements genreSongs;

	public async void GetPlaylists() {
		//var profile = await spotify.SpotifyClient.UserProfile.Get(user);
		var playlistsTask = spotify.SpotifyClient.Playlists.GetUsers(userID);
		playlistsTask.Wait();
		var playlistsAllTask = spotify.SpotifyClient.PaginateAll(playlistsTask.Result);
		playlistsAllTask.Wait();
		playlists = playlistsAllTask.Result;
	}

	public void GenerateCharts() {
		if (playlists == null)
			return;

		IEnumerable<FullTrack> allTracks = GetAllTracks(playlistList.GetSelectedPlaylists());
		IEnumerable<FullArtist> allArtists = GetAllArtists(allTracks);

		genreSongs = new Elements();
		foreach (var track in allTracks)
			foreach (var artist in track.Artists) {
				var fullArtist = allArtists.First(a => a.Id == artist.Id);
				foreach (var genre in fullArtist.Genres)
					genreSongs.Increase(new Element { Label = genre, Quantity = 1 });
			}

		var artists = new Elements();
		foreach (var track in allTracks)
			foreach (var artist in track.Artists)
				artists.Increase(new Element { Label = artist.Name, Quantity = 1 });

		artistsSongs = artists;
	}

	private IEnumerable<FullTrack> GetAllTracks(IEnumerable<SimplePlaylist> playlists) {
		IList<FullTrack> allTracks = new List<FullTrack>();
		foreach (var playlist in playlistList.GetSelectedPlaylists()) {
			var tracksTask = spotify.SpotifyClient.Playlists.GetItems(playlist.Id);
			tracksTask.Wait();
			var tracksAllTask = spotify.SpotifyClient.PaginateAll(tracksTask.Result);
			tracksAllTask.Wait();
			foreach (var song in tracksAllTask.Result)
				allTracks.Add(song.Track as FullTrack);
		}
		return allTracks;
	}

	private IEnumerable<FullArtist> GetAllArtists(IEnumerable<FullTrack> fullTracks) {
		var artistsSet = new HashSet<SimpleArtist>();
		foreach (var track in fullTracks)
			foreach (var artist in track.Artists)
				if (!artistsSet.Contains(artist))
					artistsSet.Add(artist);

		var tasks = new List<Task<FullArtist>>();
		foreach (var artist in artistsSet) {
			var task = spotify.SpotifyClient.Artists.Get(artist.Id);
			tasks.Add(task);
			Thread.Sleep(100);
		}
		Task.WaitAll(tasks.ToArray());
		return tasks.Select(t => t.Result);
	}
}
