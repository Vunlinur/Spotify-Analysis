@page "/counter"

@using SpotifyAnalysis.Data
@using SpotifyAPI.Web
@using ChartJs.Blazor.Util

@inject Spotify spotify;

<p>
	<label for="userId">User ID:</label>
	<input id="userId" size="30" @bind="userID" />
	<button class="btn-primary" @onclick="GetPlaylists">Get playlists</button>
	<button class='@playlists == null ? "disabled" : "btn-primary"' @onclick="GenerateCharts">Generate charts</button>
</p>

@if (playlists != null) {
	<PlaylistList @ref="playlistList" Playlists="playlists"></PlaylistList>
}
@if (artistsSongs != null) {
	<PieChart Title="sample" Elements="artistsSongs" />
}


@code {
	private PlaylistList playlistList;

	private string? userID = "11ek5k7fhea9otrb7k2ecizzb";
	private IEnumerable<SimplePlaylist> playlists;
	private IEnumerable<Element> artistsSongs;

	public async void GetPlaylists() {
		//var profile = await spotify.SpotifyClient.UserProfile.Get(user);
		var playlistsTask = spotify.SpotifyClient.Playlists.GetUsers(userID);
		playlistsTask.Wait();
		var playlistsAllTask = spotify.SpotifyClient.PaginateAll(playlistsTask.Result);
		playlistsAllTask.Wait();
		playlists = playlistsAllTask.Result;
	}

	public void GenerateCharts() {
		if (playlists == null)
			return;
		var elements = new Elements();
		Task<IList<PlaylistTrack<IPlayableItem>>> tracks;

		foreach (var playlist in playlistList.GetSelectedPlaylists()) {
			var tracksTask = spotify.SpotifyClient.Playlists.GetItems(playlist.Id, new PlaylistGetItemsRequest(PlaylistGetItemsRequest.AdditionalTypes.Track));
			tracksTask.Wait();
			var tracksAllTask = spotify.SpotifyClient.PaginateAll(tracksTask.Result);
			tracksAllTask.Wait();
			foreach (var song in tracksAllTask.Result)
				foreach (var artist in (song.Track as FullTrack).Artists)
					elements.Increase(new Element { Label = artist.Name, Quantity = 1 });
		}
		artistsSongs = elements;
	}
}