@page "/counter"

@using Microsoft.EntityFrameworkCore
@using SpotifyAnalysis.Data
@using SpotifyAnalysis.Data.DTO
@using SpotifyAnalysis.Data.DataAccessLayer
@using SpotifyAnalysis.Data.SpotifyAPI
@using SpotifyAPI.Web
@using System.Threading
@using MudBlazor

@inject Spotify spotify;
@inject SpotifyModule spotifyModule;
@inject SpotifyContext spotifyContext;
@inject IDialogService dialogService

<p>
    <label for="userId">User ID:</label>
    <input id="userId" size="30" @bind="userID" />
    <button class="btn btn-primary" @onclick="GetData">Get data</button>
    <button class="btn btn-primary" disabled="@(!areAnyPlaylistsSelected)" @onclick="GenerateCharts">Generate charts</button>
</p>

@if (loadValue > 0) {
    <MudProgressLinear Color="Color.Primary" Value="@loadValue" />
    <div>@loadMessage</div>
}

@if (userDTO is not null) {
    <PlaylistList @ref="playlistList" Playlists="userDTO.Playlists.ToList()" MultiSelect="true" SelectionChanged="UpdateGenerateButton"></PlaylistList>
}

<MudGrid>
    @if (artistsSongs is not null) {
        <PieChartItem Title="Artists" Elements=artistsSongs OnClickCallback="SelectArtist" />
    }
    @if (genreSongs is not null) {
        <PieChartItem Title="Genres" Elements=genreSongs />
    }
    @if (genres is not null) {
        <PieChartItem Title="Genres general" Elements=genres />
    }
</MudGrid>


@code {
    private PlaylistList playlistList;

    private string userID = "11ek5k7fhea9otrb7k2ecizzb";
    private Elements artistsSongs;
    private Elements genreSongs;
    private Elements genres;

    private UserDTO userDTO;

    private ushort loadValue = 0;
    private string loadMessage;

    private DataFetch dataFetch;


    private void UpdateProgressBar(float value, string message) {
        loadValue = (ushort)value;
        loadMessage = message ?? loadMessage;
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        dataFetch = DataFetchFactory.GetDefault(spotifyModule, UpdateProgressBar);
    }

    private async Task GetData() {
        await dataFetch.GetData(userID)
            .ContinueWith(async (t) => {
                await Task.Delay(2000);
                UpdateProgressBar(0, null);
            });
        using var db = new SpotifyContext();
        userDTO = await db.Users
            .Include(u => u.Playlists)
            .ThenInclude(p => p.Images)

            .Include(u => u.Playlists)
            .ThenInclude(p => p.Tracks)
            .ThenInclude(t => t.Artists)
            .ThenInclude(a => a.Images)

            .Include(u => u.Playlists)
            .ThenInclude(p => p.Tracks)
            .ThenInclude(t => t.Album)

            .FirstAsync(u => u.ID == userID);
    }

    Dictionary<string, ArtistDTO> allArtistsDict;
    private async Task GenerateCharts() {
        var selectedPlaylistsIds = playlistList.GetSelectedPlaylists().Select(p => p.ID).ToHashSet();
        var allTracks = userDTO.Playlists.Where(p => selectedPlaylistsIds.Contains(p.ID)).SelectMany(p => p.Tracks);
        allArtistsDict = allTracks.SelectMany(t => t.Artists).DistinctBy(t => t.ID).ToDictionary(a => a.ID, a => a);

        var artistsSongsTask = BuildArtistsAsync(allTracks);
        var genreSongsTask = BuildGenresAsync(allTracks, allArtistsDict);
        var genresTask = BuildGenresGeneralAsync(allTracks, allArtistsDict);

        artistsSongs = await artistsSongsTask;
        genreSongs = await genreSongsTask;
        genres = await genresTask;
        StateHasChanged();
    }

    private async Task<Elements> BuildArtistsAsync(IEnumerable<TrackDTO> allTracks) {
        Elements BuildArtists() {
            artistsSongs = new Elements();
            foreach (var track in allTracks)
                foreach (var artist in track.Artists)
                    artistsSongs.Increase(new Element { Label = artist.Name, Quantity = 1 });
            return artistsSongs;
        }

        return await Task<Elements>.Run(BuildArtists);
    }

    private async Task<Elements> BuildGenresAsync(IEnumerable<TrackDTO> allTracks, IDictionary<string, ArtistDTO> allArtists) {
        Elements BuildGenres() {
            genreSongs = new Elements();
            foreach (var track in allTracks)
                foreach (var artist in track.Artists)
                    foreach (var genre in allArtists[artist.ID].Genres)
                        genreSongs.Increase(new Element { Label = genre, Quantity = 1 });
            return genreSongs;
        }

        return await Task<Elements>.Run(BuildGenres);
    }

    private async Task<Elements> BuildGenresGeneralAsync(IEnumerable<TrackDTO> allTracks, IDictionary<string, ArtistDTO> allArtists) {
        Elements BuildGenresGeneral() {
            var genres = new Elements();
            foreach (var track in allTracks)
                foreach (var artist in track.Artists)
                    foreach (var genre in allArtists[artist.ID].Genres)
                        foreach (string word in genre.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries))
                            genres.Increase(new Element { Label = word, Quantity = 1 });
            string[] excludes = { "of", "and", "new", "music" };
            foreach (var exclusion in excludes)
                genres.Extract(exclusion);
            return genres;
        }

        return await Task<Elements>.Run(BuildGenresGeneral);
    }

    private bool areAnyPlaylistsSelected;
    internal void UpdateGenerateButton(bool areAnySelected) {
        if (areAnyPlaylistsSelected != areAnySelected) {
            areAnyPlaylistsSelected = areAnySelected;
            StateHasChanged();
        }
    }

    internal void SelectArtist(string artistName) {
        var selectedArtist = allArtistsDict.FirstOrDefault(p => p.Value.Name == artistName).Value;
        var parameters = new DialogParameters<ArtistPane>() { { x => x.Artist, selectedArtist } };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true };
        dialogService.Show<ArtistPane>(artistName, parameters, options);
        StateHasChanged();
    }
}
