@page "/charts"

@using SpotifyAnalysis.Data
@using SpotifyAnalysis.Data.DTO
@using System.Threading
@using System.Collections.Concurrent
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

@inject IDialogService dialogService;
@inject ProtectedLocalStorage localStorage
@inject ScopedData data;


<MudAppBar Color="Color.Surface" Fixed="false" Style="position: fixed; width: -webkit-fill-available; width: -moz-available;">
    <HelpButton Title="What is this for?">
        <HelpPlaylistCharts />
    </HelpButton>
    <MudButton Variant=Variant.Outlined Class="rounded-pill" Style="width: 200px;" OnClick=TogglePlaylistTable Disabled="@(data.UserDTO is null)">@(open ? "Hide" : "Show") playlists</MudButton>
    <MudText Typo=Typo.subtitle1 Class="ml-12">@($"{playlistTable?.GetSelectedPlaylists()?.Count() ?? 0} / {data.UserDTO?.Playlists?.Count ?? 0}") playlist selected</MudText>
   <MudSpacer />
    <MudButton Variant=Variant.Outlined Class="rounded-pill" OnClick="GenerateCharts" Disabled="@(selectedCount == 0)">Generate charts</MudButton>
</MudAppBar>
<div style="height: var(--mud-appbar-height);" /> @* a cheat to offset for the AppBar's position: fixed which takes no space *@

@if (data.UserDTO is not null) {
    <MudCollapse Expanded=@open>
        <PlaylistTable @ref="playlistTable" Name="Charts" Playlists="data.UserDTO.Playlists" SelectionChanged="UpdateGenerateButton" />
    </MudCollapse>
}

@if (AllTracks is not null) {
    <div class="pt-3 px-3">
        <MudGrid>
            <WidgetArtists @ref=chartRef Tracks="AllTracks" ArtistsDict="ArtistsDict" />
            <WidgetGenres @ref=chartRef Tracks="AllTracks" ArtistsDict="ArtistsDict" />
            <WidgetGenresGeneral @ref=chartRef Tracks="AllTracks" ArtistsDict="ArtistsDict" />
            <WidgetYears @ref=chartRef Tracks="AllTracks"/>
        </MudGrid>
    </div>
}

@code {
    private PlaylistTable playlistTable;

    Storage<bool> storageOpen;
    List<WidgetBase> chartRefs = [];
    WidgetBase chartRef { set { chartRefs.Add(value); } }

    private bool open { get; set; }
    private async void TogglePlaylistTable() {
        open = !open;
        await storageOpen.Set(open);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
            return;

        storageOpen = new(nameof(storageOpen), localStorage);
        open = await storageOpen.Get();
        if (open)
            StateHasChanged();
    }

    IEnumerable<TrackDTO> AllTracks;
    IDictionary<string, ArtistDTO> ArtistsDict;
    private async Task GenerateCharts() {
        open = false;
        AllTracks = playlistTable.GetSelectedPlaylists().SelectMany(p => p.Tracks);
        ArtistsDict = new ConcurrentDictionary<string, ArtistDTO>(AllTracks.SelectMany(t => t.Artists).DistinctBy(t => t.ID).ToDictionary(a => a.ID, a => a));

        await Task.Delay(100);  // TODO fix dirty hack, this prevents a race condition, presumably between the server and the js chart
        foreach (var chart in chartRefs) 
            chart.ProcessData();

        await InvokeAsync(StateHasChanged);
        foreach (var chart in chartRefs)
            chart.RefreshChartAsync();
        await storageOpen.Set(open);
        StateHasChanged();
    }

    private int selectedCount;
    internal void UpdateGenerateButton(int newSelectedCount) {
        selectedCount = newSelectedCount;
        StateHasChanged();
    }
}
