@page "/playlistgenres"

@using Fernandezja.ColorHashSharp
@using SpotifyAnalysis.Data
@using SpotifyAnalysis.Data.DTO
@using System.Threading
@using System.Collections.Concurrent
@using MudBlazor
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

@inject IDialogService dialogService;
@inject ProtectedLocalStorage localStorage
@inject ScopedData data;


@if (loaded) {
	<MudDataGrid T="Playlist" Items="@Playlists" FixedHeader
				 SortMode="SortMode.Multiple" QuickFilter=@Filter >
		<ToolBarContent>
			<MudText Typo="Typo.h6">Top 3 playlist genres</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
						  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<Columns>
			<TemplateColumn Sortable=false HeaderStyle="width: 50px">
				<CellTemplate>
					<MudImage Height="50" Width="50" Src=@GetImage(context) />
				</CellTemplate>
			</TemplateColumn>
			<PropertyColumn Property="x => x.playlistDTO.Name" Title="Name" />
			<PropertyColumn Property="x => x.playlistDTO.OwnerName" Title="Owner" CellStyle="color: grey" />
			<PropertyColumn Property="x => x.playlistDTO.TracksTotal" Title="Tracks" HeaderStyle="width:60px" />
			<TemplateColumn Title="#1">
				<CellTemplate>
					<GenreRatio Context="context" Index="0"/>
				</CellTemplate>
			</TemplateColumn>
			<TemplateColumn Title="#2">
				<CellTemplate>
					<GenreRatio Context="context" Index="1" />
				</CellTemplate>
			</TemplateColumn>
			<TemplateColumn Title="#3">
				<CellTemplate>
					<GenreRatio Context="context" Index="2" />
				</CellTemplate>
			</TemplateColumn>
		</Columns>
	</MudDataGrid>
}

<style>
	tr > td:nth-last-child(-n + 3) {
		padding: 0 4px;
	}

	td > div {
		width: 100%;
		font-weight: bold;
    }

	.mud-chip {
		padding: 0;
	}

	.mud-chip.mud-chip-size-medium {
		height: 42px;
	}
</style>

@code {
	IEnumerable<Playlist> Playlists { get; set; }
	bool loaded;
	string searchString;
	private PlaylistTable playlistTable;

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		var playlistsTasks = data.UserDTO.Playlists.Select(CalculateGenresAsync).ToArray();
		Playlists = await Task.WhenAll(playlistsTasks);
		Color(Playlists);
		loaded = true;
	}

	async Task<Playlist> CalculateGenresAsync(PlaylistDTO playlistDTO) => await Task.Run(() => 
			new Playlist(playlistDTO, CalculatePlaylistGenres(playlistDTO))
		);

	List<Genre> CalculatePlaylistGenres(PlaylistDTO p) {
		var topGenres = new ConcurrentDictionary<string, int>(StringComparer.OrdinalIgnoreCase);
		var tasks = p.Tracks.Select(async track => {
			foreach (var artist in track.Artists) 
				foreach (string genre in artist.Genres)
					topGenres.AddOrUpdate(genre, 1, (_, count) => count + 1);
		}).ToArray();

		Task.WaitAll(tasks);

		return topGenres
			.OrderByDescending(kv => kv.Value)
			.Take(3)
			.Select(kv => new Genre(kv.Key, kv.Value))
			.ToList();
	}

	void Color(IEnumerable<Playlist> playlists) {
		Dictionary<string, string> genreColors = new(StringComparer.OrdinalIgnoreCase);

		foreach (var playlist in playlists)
			foreach (var genre in playlist.topGenres) {
				if (!genreColors.ContainsKey(genre.name))
					genreColors[genre.name] = GenreToColor(genre.name);
				genre.color = genreColors[genre.name];
			}
	}

	static readonly char[] splitOn = [ ' ', '-' ];
	public static string GenreToColor(string genre) {
		var tokens = genre
			.ToLower()
			.Replace("music", "")
			.Split(splitOn, StringSplitOptions.RemoveEmptyEntries);
		string root = tokens.Last(); // e.g. "rock" from "classic rock"
		var colorHash = new ColorHash();
		return '#' + colorHash.Hex(root);
	}

	bool Filter(Playlist p) {
		if (string.IsNullOrWhiteSpace(searchString))
			return true;

		if (p.playlistDTO.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		foreach (var genre in p.topGenres)
			if (genre.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
				return true;

		return false;
	}

	string GetImage(CellContext<Playlist> c) => c.Item.playlistDTO.Images.FirstOrDefault()?.Url ?? StaticResourceMap.UnknownPlaylist;
}
