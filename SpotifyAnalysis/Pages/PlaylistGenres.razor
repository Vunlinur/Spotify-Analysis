@page "/playlistgenres"

@using Fernandezja.ColorHashSharp
@using SpotifyAnalysis.Data
@using SpotifyAnalysis.Data.DTO
@using System.Threading
@using System.Collections.Concurrent
@using MudBlazor
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

@inject IDialogService dialogService;
@inject ProtectedLocalStorage localStorage
@inject ScopedData data;


@if (loaded) {
	<MudDataGrid T="Playlist" Items="@Playlists" FixedHeader
				 SortMode="SortMode.Multiple" QuickFilter=@Filter >
		<ToolBarContent>
			<MudText Typo="Typo.h6">Top 3 playlist genres</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
						  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<Columns>
			<TemplateColumn Sortable=false HeaderStyle="width: 50px">
				<CellTemplate>
					<MudImage Height="50" Width="50" Src=@GetImage(context) />
				</CellTemplate>
			</TemplateColumn>
			<PropertyColumn Property="x => x.playlistDTO.Name" Title="Name" />
			<PropertyColumn Property="x => x.playlistDTO.OwnerName" Title="Owner" CellStyle="color: grey" />
			<PropertyColumn Property="x => x.playlistDTO.TracksTotal" Title="Tracks" HeaderStyle="width:100px" />
			<PropertyColumn Property="x => Get(x.topGenres, 0).name" Title="#1" CellStyleFunc="p => CellStyle(p, 0)" />
			<PropertyColumn Property="x => Get(x.topGenres, 1).name" Title="#2" CellStyleFunc="p => CellStyle(p, 1)" />
			<PropertyColumn Property="x => Get(x.topGenres, 2).name" Title="#3" CellStyleFunc="p => CellStyle(p, 2)" />
		</Columns>
	</MudDataGrid>
}

@code {
	IEnumerable<Playlist> Playlists { get; set; }
	bool loaded;
	string searchString;
	private PlaylistTable playlistTable;

	protected override async Task OnInitializedAsync() {
		await base.OnInitializedAsync();
		var playlistsTasks = data.UserDTO.Playlists.Select(CalculateGenresAsync).ToArray();
		Playlists = await Task.WhenAll(playlistsTasks);
		Color(Playlists);
		loaded = true;
	}

	async Task<Playlist> CalculateGenresAsync(PlaylistDTO playlistDTO) => await Task.Run(() => 
			new Playlist(playlistDTO, CalculatePlaylistGenres(playlistDTO))
		);

	List<Genre> CalculatePlaylistGenres(PlaylistDTO p) {
		var topGenres = new ConcurrentDictionary<string, int>(StringComparer.OrdinalIgnoreCase);
		var tasks = p.Tracks.Select(async track => {
			foreach (var artist in track.Artists) 
				foreach (string genre in artist.Genres)
					topGenres.AddOrUpdate(genre, 1, (_, count) => count + 1);
		}).ToArray();

		Task.WaitAll(tasks);

		return topGenres
			.OrderByDescending(kv => kv.Value)
			.Take(3)
			.Select(kv => new Genre(kv.Key, kv.Value))
			.ToList();
	}

	void Color(IEnumerable<Playlist> playlists) {
		Dictionary<string, string> genreColors = new(StringComparer.OrdinalIgnoreCase);

		foreach (var playlist in playlists)
			foreach (var genre in playlist.topGenres) {
				if (!genreColors.ContainsKey(genre.name))
					genreColors[genre.name] = GenreToColor(genre.name);
				genre.color = genreColors[genre.name];
			}
	}

	public static string GenreToColor(string genre) {
		var tokens = genre.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries);
		string root = tokens.Last(); // e.g. "rock" from "classic rock"
		var colorHash = new ColorHash();
		return '#' + colorHash.Hex(root);
	}

	string CellStyle(Playlist p, int ordinal) => $"background: {Get(p.topGenres, ordinal).color}";

	bool Filter(Playlist p) {
		if (string.IsNullOrWhiteSpace(searchString))
			return true;

		if (p.playlistDTO.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		foreach (var genre in p.topGenres)
			if (genre.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
				return true;

		return false;
	}

	string GetImage(CellContext<Playlist> c) => c.Item.playlistDTO.Images.FirstOrDefault()?.Url ?? StaticResourceMap.UnknownPlaylist;

	static Genre empty = new("", 0) { color = "" };
	Genre Get(List<Genre> list, int index) => index < list.Count ? list[index] : empty;

	class Playlist(PlaylistDTO playlistDTO, List<Genre> topGenres) {
		public PlaylistDTO playlistDTO = playlistDTO;
		public List<Genre> topGenres = topGenres;
	}

	class Genre(string name, int count) {
		public string name = name;
		public int count = count;
		public string color;
	}
}
