@page "/duplicates"

@using SpotifyAnalysis.Data
@using SpotifyAnalysis.Data.DTO
@using System.Threading
@using System.Collections.Concurrent
@using System.Linq.Expressions
@using FuzzySharp;

@inject IDialogService dialogService;
@inject ScopedData data;


<MudAppBar Color="Color.Surface" Fixed="false" Style="position: fixed; width: -webkit-fill-available; width: -moz-available;">
    <MudButton Variant=Variant.Outlined Class="rounded-pill" Style="width: 200px;" OnClick=TogglePlaylistTable Disabled="@(data.UserDTO is null)">@(open ? "Hide" : "Show") playlists</MudButton>
    <MudText Typo=Typo.subtitle1 Class="ml-12">@($"{tableDupes?.GetSelectedPlaylists()?.Count() ?? 0} / {data.UserDTO?.Playlists?.Count ?? 0}") playlist selected</MudText>
    <MudSpacer />
    <MudSlider @bind-Value=similarityThreshold Min=75 Max=100 Variant="Variant.Filled" Class="mr-8" Style="width: 300px">Similarity threshold: @similarityThreshold.ToString()%</MudSlider>
    <MudButton Variant=Variant.Outlined Class="rounded-pill" OnClick="FindDuplicates" Disabled="!readyToSearch">Find duplicates</MudButton>
</MudAppBar>
<div style="height: var(--mud-appbar-height);" /> @* a cheat to offset for the AppBar's position: fixed which takes no space *@

@if (data.UserDTO is not null) {
    <MudCollapse Expanded=@open>
        <MudStack Row StretchItems=StretchItems.All Style="gap: 2px;">
            <PlaylistTable @ref="tableOriginal" Title="Original (one)" Playlists="data.UserDTO.Playlists" Name="Duplicated" SelectionChanged="c => UpdateGenerateButton(Table.Original, c)" MultiSelection=false />
            <PlaylistTable @ref="tableDupes" Title="Duplicates (many)" Playlists="data.UserDTO.Playlists" Name="Duplicates" SelectionChanged="c => UpdateGenerateButton(Table.Duplicates, c)" />
        </MudStack>
    </MudCollapse>
}

<MudDataGrid T="Duplicate" @ref="dataGrid" Items="@duplicates" FixedHeader
             QuickFilter=@Filter FilterCaseSensitivity=@DataGridFilterCaseSensitivity.CaseInsensitive
             Filterable="true" Groupable="true" GroupExpanded="true">
    <ToolBarContent>
        <HelpButton Title="What is this for?"><HelpSearchPlaylist /></HelpButton>
        <MudText Typo="Typo.h6">Browse tracks</MudText>
        <MudButtonGroup Variant="Variant.Outlined" Class="pl-6">
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp" aria-label="Collapse all" OnClick=CollapseAll />
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown" aria-label="Expand all" OnClick="ExpandAll" />
        </MudButtonGroup>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        @* Original track columns *@
        <PropertyColumn Title="Original Title" Property="x => x.original.Name" HeaderStyle="width: 15%" Grouping>
            <CellTemplate>
                <MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:track:" + context.Item.original.ID)>@(context.Item.original.Name)</MudLink>
            </CellTemplate>
            <GroupTemplate>
                <span style="font-weight:bold">
                    Original: @context.Grouping.Key
                    <MudChip Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small">total @context.Grouping.Count()</MudChip>
                </span>
            </GroupTemplate>
        </PropertyColumn>

        <PropertyColumn Title="Original Artists" Property="x => x.original.Artists" HeaderStyle="width: 15%" GroupBy="x => x.original.Artists[0].Name">
            <CellTemplate>
                @foreach (var artist in context.Item.original.Artists) {
                    <MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:artist:" + artist.ID)>@(artist.Name)</MudLink>
                }
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Title="Original Album" Property="x => x.original.Album.Name">
            <CellTemplate>
                <MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:album:" + context.Item.original.Album.ID)>@(context.Item.original.Album.Name)</MudLink>
            </CellTemplate>
        </PropertyColumn>

        @* Duplicate track columns *@
        <PropertyColumn Title="Duplicate Playlist" Property="x => x.playlist.Name" HeaderStyle="width: 10%">
            <CellTemplate>
                <MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:playlist:" + context.Item.playlist.ID)>@(context.Item.playlist.Name)</MudLink>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Title="Duplicate Title" Property="x => x.dupe.Name" HeaderStyle="width: 15%">
            <CellTemplate>
                <MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:track:" + context.Item.dupe.ID)>@(context.Item.dupe.Name)</MudLink>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Title="Duplicate Artists" Property="x => x.dupe.Artists" HeaderStyle="width: 15%" GroupBy="x => x.dupe.Artists[0].Name">
            <CellTemplate>
                @foreach (var artist in context.Item.dupe.Artists) {
                    <MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:artist:" + artist.ID)>@(artist.Name)</MudLink>
                }
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Title="Duplicate Album" Property="x => x.dupe.Album.Name">
            <CellTemplate>
                <MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:album:" + context.Item.dupe.Album.ID)>@(context.Item.dupe.Album.Name)</MudLink>
            </CellTemplate>
        </PropertyColumn>
    </Columns>
</MudDataGrid>

<style>
    td:nth-child(n+4) {
        background: rgba(255, 0, 0, 0.1);
    }
</style>


@code {
    PlaylistTable tableOriginal;
    PlaylistTable tableDupes;
    MudDataGrid<Duplicate> dataGrid;

    private bool open { get; set; }
    private void TogglePlaylistTable() => open = !open;

    ConcurrentBag<Duplicate> duplicates = [];
    List<PlaylistDTO> playlistsWDuplicates = [];
    private async Task FindDuplicates() {
        open = false;
        var originalPlaylist = tableOriginal.GetSelectedPlaylists().First();
        var duplicatePlaylists = tableDupes.GetSelectedPlaylists();

        if (originalPlaylist == null || !duplicatePlaylists.Any())
            return;

        duplicates = new ConcurrentBag<Duplicate>();
        var playlistTasks = duplicatePlaylists.Select(duplicatePlaylist => Task.Run(
            () => SearchPlaylist(originalPlaylist, duplicatePlaylist)
        ));
        await Task.WhenAll(playlistTasks);
    }

    private void SearchPlaylist(PlaylistDTO original, PlaylistDTO duplicate) {
        HashSet<Duplicate> duplicateSet = new();
        foreach (var originalTrack in original.Tracks)
            foreach (var duplicateTrack in duplicate.Tracks)
                if (AreTracksSimilar(originalTrack.Name, duplicateTrack.Name))
                    duplicateSet.Add(new Duplicate(originalTrack, duplicateTrack, duplicate));

        // If checking for dupes in the same playlist, remove one occurrence of
        // the original track from the dupes if IDs match - this is the original
        if (original.ID == duplicate.ID)
            foreach (var originalTrack in original.Tracks)
                duplicateSet.RemoveWhere(d => d.dupe.ID == originalTrack.ID);

        foreach (var d in duplicateSet)
            duplicates.Add(d);
    }

    int similarityThreshold = 95;
    private bool AreTracksSimilar(string original, string duplicate) {
        int similarity = Fuzz.WeightedRatio(original.ToLower(), duplicate.ToLower());
        return similarity >= similarityThreshold;
    }

    bool readyToSearch;
    Dictionary<Table, int> selections = [];
    void UpdateGenerateButton(Table table, int newSelectedCount) {
        selections[table] = newSelectedCount;
        readyToSearch = selections.Values.All(v => v > 0);
        StateHasChanged();
    }

    void ExpandAll() => dataGrid?.ExpandAllGroups();

    void CollapseAll() => dataGrid?.CollapseAllGroups();

    string _searchString;
    bool Filter(Duplicate d) {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (d.dupe.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (d.dupe.Album.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (d.dupe.Artists.Any(a => a.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)))
            return true;

        return false;
    }

    class Duplicate(TrackDTO original, TrackDTO dupe, PlaylistDTO playlist) {
        public TrackDTO original = original;
        public TrackDTO dupe = dupe;
        public PlaylistDTO playlist = playlist;
    }

    enum Table {
        Original,
        Duplicates
    }
}
