@page "/"

@using SpotifyAnalysis.Data.SpotifyAPI
@using SpotifyAnalysis.Data.DTO
@using SpotifyAnalysis.Data.DataAccessLayer
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions

@inject IDialogService DialogService
@inject SpotifyModule spotifyModule;
@inject SpotifyContext db;

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudStack Justify=Justify.SpaceEvenly Style="height: 80vh">
        <MudStack AlignItems=AlignItems.Center>
            <MudTextField @bind-Value="userID" Label="User ID" Variant="Variant.Outlined" FullWidth Margin="Margin.Dense"></MudTextField>
            <MudButton Variant=Variant.Outlined Class="rounded-pill" Style="width: 150px" OnClick="OpenSwitchUserDialogAsync">Select User</MudButton>
        </MudStack>
        <MudDivider DividerType=DividerType.Middle />
        <MudPaper>
            <MudStack Row Justify=Justify.SpaceBetween AlignItems=AlignItems.Center Class="pa-4" >
                <MudAvatar Size="Size.Large">
                    <MudImage Src=@(user?.Images?.Last()?.Url ?? "anonymous-user.jpg") />
                </MudAvatar>
                <div>
                    <MudText Typo="Typo.h6">@user.Name</MudText>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@user.ID</MudText>
                </div>
                <OpenInSpotify Id=@userID ResType=OpenInSpotify.ResourceType.User Disabled=@(string.IsNullOrEmpty(user.ID)) />
            </MudStack>
        </MudPaper>
    </MudStack>
</MudContainer>


@code {
    string userID = "11ek5k7fhea9otrb7k2ecizzb";
    UserDTO user = new UserDTO();


    async Task OpenSwitchUserDialogAsync() {
        var tempId = SanitizeUserID(userID);
        if (string.IsNullOrEmpty(tempId)) {
            // TODO tell it's wrong
            return;
        }
        userID = tempId;

        var publicUser = await spotifyModule.GetUserProfile(userID);
        var userDTO = publicUser.ToUserDTO();

        await OpenDialogAsync(userDTO);

        // Do we have the user in the DB?
        //var userDTO = await db.Users
        //    .Include(u => u.Images)
        //    .FirstOrDefaultAsync(u => u.ID == userID);
        //
        //bool getUserData = userDTO is null || MinutesSince(userDTO.Updated) > 1;


        // TODO launch "is this the correct user" prompt to finalize switch
    }

    private async Task OpenDialogAsync(UserDTO userDto) {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<UserSelectionDialog>{ {x => x.User, userDto } };
        var dialog = await DialogService.ShowAsync<UserSelectionDialog>("Is this the correct user?", parameters, options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        user = userDto;
        StateHasChanged();
    }

    static readonly Regex idRegex = new Regex(@"^(?:.+users?[\/:])?(\w{20,28})\??");
    static string SanitizeUserID(string input) => idRegex.Match(input).Groups[1]?.Value;

    static int MinutesSince(DateTime since) => DateTime.Now.Subtract(since).Minutes;
}