@page "/"

@using SpotifyAnalysis.Data.SpotifyAPI
@using SpotifyAnalysis.Data.DTO
@using SpotifyAnalysis.Data.DataAccessLayer
@using Microsoft.EntityFrameworkCore
@using System.Text.RegularExpressions

@inject IDialogService DialogService
@inject SpotifyModule spotifyModule;
@inject SpotifyContext db;
@inject ScopedData data;

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudStack Justify=Justify.SpaceEvenly Style="height: 80vh">
        <MudStack AlignItems=AlignItems.Center>
            <MudTextField @bind-Value="userID" Label="User ID" Variant="Variant.Outlined" FullWidth Margin="Margin.Dense"></MudTextField>
            <MudButton Variant=Variant.Outlined Class="rounded-pill" Style="width: 150px" OnClick="OpenSwitchUserDialogAsync">Select User</MudButton>
        </MudStack>
        <MudStack AlignItems=AlignItems.Center Style="height:50px;">
            <MudProgressLinear Color="Color.Primary" Value="@loadValue" />
            <MudText Typo="Typo.h6">@loadMessage</MudText>
        </MudStack>
        <MudPaper>
            <MudStack Row Justify=Justify.SpaceBetween AlignItems=AlignItems.Center Class="pa-4" >
                <MudAvatar Size="Size.Large">
                    <MudImage Src=@(user?.Images?.Last()?.Url ?? "anonymous-user.jpg") />
                </MudAvatar>
                <div>
                    <MudText Typo="Typo.h6">@user.Name</MudText>
                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@user.ID</MudText>
                </div>
                <OpenInSpotify Id=@userID ResType=OpenInSpotify.ResourceType.User Disabled=@(string.IsNullOrEmpty(user.ID)) />
            </MudStack>
        </MudPaper>
    </MudStack>
</MudContainer>


@code {
    DataFetch dataFetch;
    UserDTO user;
    string userID = "11ek5k7fhea9otrb7k2ecizzb";
    ushort loadValue = 0;
    string loadMessage;


    protected override void OnInitialized() {
        base.OnInitialized();
        dataFetch = DataFetchFactory.GetDefault(spotifyModule, UpdateProgressBar);
        user = data.UserDTO ?? new UserDTO();
    }

    private void UpdateProgressBar(float value, string message) {
        loadValue = (ushort)value;
        loadMessage = message ?? loadMessage;
        InvokeAsync(StateHasChanged);
    }

    async Task OpenSwitchUserDialogAsync() {
        var tempId = SanitizeUserID(userID);
        if (string.IsNullOrEmpty(tempId)) {
            // TODO tell it's wrong
            return;
        }
        userID = tempId;

        var publicUser = await spotifyModule.GetUserProfile(userID);
        var userDTO = publicUser.ToUserDTO();

        var response = await OpenDialogAsync(userDTO);
        if (response.Canceled)
            return;

        user = userDTO;
        StateHasChanged();

        // Do we have the user in the DB?
        //var userDTO = await db.Users
        //    .Include(u => u.Images)
        //    .FirstOrDefaultAsync(u => u.ID == userID);
        //
        //bool getUserData = userDTO is null || MinutesSince(userDTO.Updated) > 1;

        await dataFetch.GetData(userID);
        data.UserDTO = await GetUserDTOFromDB(userID);
    }

    private async Task<DialogResult> OpenDialogAsync(UserDTO userDto) {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<UserSelectionDialog>{ {x => x.User, userDto } };
        var dialog = await DialogService.ShowAsync<UserSelectionDialog>("Is this the correct user?", parameters, options);
        return await dialog.Result;
    }

    private async Task<UserDTO> GetUserDTOFromDB(string userID) {
        using var db = new SpotifyContext();
        return await db.Users
            .Include(u => u.Images)

            .Include(u => u.Playlists)
            .ThenInclude(p => p.Images)

            .Include(u => u.Playlists)
            .ThenInclude(p => p.Tracks)
            .ThenInclude(t => t.Artists)
            .ThenInclude(a => a.Images)

            .Include(u => u.Playlists)
            .ThenInclude(p => p.Tracks)
            .ThenInclude(t => t.Album)

            .FirstAsync(u => u.ID == userID);
    }

    static readonly Regex idRegex = new Regex(@"^(?:.+users?[\/:])?(\w{20,28})\??");
    static string SanitizeUserID(string input) => idRegex.Match(input).Groups[1]?.Value;

    static int MinutesSince(DateTime since) => DateTime.Now.Subtract(since).Minutes;
}