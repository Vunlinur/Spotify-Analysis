@page "/fetchdata"

@using SpotifyAnalysis.Data
@using SpotifyAnalysis.Data.DTO
@using SpotifyAnalysis.Data.DataAccessLayer

@inject SpotifyMudTheme SpotifyTheme
@inject ScopedData data;


<MudDataGrid T="TrackPlaylist" @ref="dataGrid" Items="@tracks" Virtualize FixedHeader
             SortMode="SortMode.Multiple" QuickFilter=@Filter FilterCaseSensitivity=@DataGridFilterCaseSensitivity.CaseInsensitive
             Filterable="true" Groupable="true" GroupExpanded="false" >
    <ToolBarContent>
        <HelpButton Title="What is this for?"><HelpSearchPlaylist /></HelpButton>
        <MudText Typo="Typo.h6">Find my music</MudText>
        <MudButtonGroup Variant="Variant.Outlined" Class="pl-6">
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp" aria-label="Collapse all" OnClick=CollapseAll />
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown" aria-label="Expand all" OnClick="ExpandAll" />
        </MudButtonGroup>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Title="Title" Property="x => x.Track.Name" HeaderStyle="width: 20%" Groupable="false" >
			<CellTemplate>
				<MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:track:" + context.Item.Track.ID) >@(context.Item.Track.Name)</MudLink>
			</CellTemplate>
		</PropertyColumn>

        <PropertyColumn Title="Artists" Property="x => x.Artists" HeaderStyle="width: 20%" >
			<CellTemplate>
                @foreach (var artist in context.Item.Track.Artists) {
                    <MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:artist:" + artist.ID) >@(artist.Name)</MudLink>
                }
			</CellTemplate>
        </PropertyColumn>

        <PropertyColumn Title="Album" Property="x => x.Track.Album.Name" >
			<CellTemplate>
				<MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:album:" + context.Item.Track.Album.ID) >@(context.Item.Track.Album.Name)</MudLink>
			</CellTemplate>
		</PropertyColumn>

   		<PropertyColumn Title="Duration" Property="x => x.Track.DurationMs" Groupable=false Filterable=false HeaderStyle="width: 6%">
			<CellTemplate>
                <MudText>@FormatDuration(context)</MudText>
            </CellTemplate>
		</PropertyColumn>

		<PropertyColumn Title="Popularity" Property="x => x.Track.Popularity" Groupable=false HeaderStyle="width: 10%">
			<CellTemplate>
				<MudProgressLinear Color="Color.Primary" Value=@(context.Item.Track.Popularity) />
			</CellTemplate>
		</PropertyColumn>

        <PropertyColumn Title="Playlist" Property="x => x.Playlist.Name" Grouping HeaderStyle="width: 20%" >
			<CellTemplate>
				<MudLink Typo="Typo.body2" Color=@Color.Default Href=@("spotify:playlist:" + context.Item.Playlist.ID) >@(context.Item.Playlist.Name)</MudLink>
			</CellTemplate>
		</PropertyColumn>
    </Columns>
</MudDataGrid>

<style>
	@*MudDataGrid Style and Class affect different element than Width - which is actually the one we need - hence this hack
	3/4 * main AppBar + 4/4 DataGrid filter bar (each 64px)*@
	.mud-table-container {
		max-height: calc(100vh - (var(--mud-appbar-height) * 7 / 4));
	}

    @*space between artists*@
    a {
        padding: 0 8px 0 0;
    }

        a:hover {
            color: @(SpotifyTheme.PaletteDark.Primary)
        }
</style>


@code {
    class TrackPlaylist(TrackDTO t, PlaylistDTO p) {
        public TrackDTO Track = t;
        public PlaylistDTO Playlist = p;
        public readonly string Artists = string.Join(", ", t.Artists.Select(a => a.Name));
    }

    MudDataGrid<TrackPlaylist> dataGrid;
    List<TrackPlaylist> tracks;
    string _searchString;

    protected override void OnInitialized() {
        tracks = data.UserDTO?.Playlists.SelectMany(
            p => p.Tracks.Select(t => new TrackPlaylist(t, p))
        ).ToList();
    }

    string FormatDuration(CellContext<TrackPlaylist> context) {
        var ts = TimeSpan.FromMilliseconds(context.Item.Track.DurationMs);
        return ts.ToString(ts.Hours > 0 ? @"h\:mm\:ss" : @"m\:ss");
    }

    void ExpandAll() => dataGrid?.ExpandAllGroups();

    void CollapseAll() => dataGrid?.CollapseAllGroups();

    bool Filter(TrackPlaylist p) {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (p.Track.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (p.Artists.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (p.Track.Album.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (p.Playlist.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
