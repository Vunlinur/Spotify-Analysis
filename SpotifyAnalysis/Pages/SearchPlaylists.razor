@page "/fetchdata"

@using SpotifyAnalysis.Data
@using SpotifyAnalysis.Data.DTO
@using SpotifyAnalysis.Data.DataAccessLayer

@inject ScopedData data;


<MudDataGrid T="TrackPlaylist" @ref="dataGrid" Items="@tracks" Virtualize FixedHeader
             SortMode="SortMode.Multiple" QuickFilter=@Filter Filterable="true"
             Groupable="true" GroupExpanded="false" >
    <ToolBarContent>
        <HelpButton Title="What is this for?"><HelpSearchPlaylist /></HelpButton>
        <MudText Typo="Typo.h6">Find my music</MudText>
        <MudButtonGroup Variant="Variant.Outlined" Class="pl-6">
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowUp" aria-label="Collapse all" OnClick=CollapseAll />
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown" aria-label="Expand all" OnClick="ExpandAll" />
        </MudButtonGroup>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Track.Name" Title="Title" Grouping GroupBy="@_groupBy" />
        <PropertyColumn Property="x => x.Track.Popularity" Title="Popularity" />
        <PropertyColumn Property="x => x.Track.Album.Name" Title="Album" />
        <PropertyColumn Property="x => x.Artists" Title="Artists" />
    </Columns>
</MudDataGrid>

<style>
	@*MudDataGrid Style and Class affect different element than Width - which is actually the one we need - hence this hack
	3/4 * main AppBar + 4/4 DataGrid filter bar (each 64px)*@
	.mud-table-container {
		max-height: calc(100vh - (var(--mud-appbar-height) * 7 / 4));
	}
</style>


@code {
    class TrackPlaylist(TrackDTO t, PlaylistDTO p) {
        public TrackDTO Track = t;
        public PlaylistDTO Playlist = p;
        public readonly string Artists = string.Join(", ", t.Artists.Select(a => a.Name));
    }

    MudDataGrid<TrackPlaylist> dataGrid;
    List<TrackPlaylist> tracks;
    string _searchString;

    Func<TrackPlaylist, object> _groupBy = x => x.Playlist.Name;

    protected override void OnInitialized() {
        tracks = data.UserDTO?.Playlists.SelectMany(
            p => p.Tracks.Select(t => new TrackPlaylist(t, p))
        ).ToList();
    }

    void ExpandAll() => dataGrid?.ExpandAllGroups();

    void CollapseAll() => dataGrid?.CollapseAllGroups();

    bool Filter(TrackPlaylist p) {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (p.Track.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (p.Track.Album.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (p.Artists.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
