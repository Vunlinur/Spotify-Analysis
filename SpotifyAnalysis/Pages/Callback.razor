@page "/callback"

@using SpotifyAnalysis.Data.SpotifyAPI
@using SpotifyAnalysis.Data.DTO

@implements IDisposable

@inject NavigationManager Navigation
@inject SpotifyClientScoped SpotifyClientScoped

<MudContainer MaxWidth="MaxWidth.Large" Class="d-flex flex-column align-center justify-center" Style="height: 80vh; text-align: center;">
    <MudPaper Elevation="3" Class="pa-6">
        @if (success) {
            <MudText Typo="Typo.h5" Class="mb-4">Success!</MudText>
            <MudText Typo="Typo.body1" Class="mb-3">Spotify authorization was successful.</MudText>
            <MudText Typo="Typo.body2" Class="mb-4">You can close this tab and go back to your app.</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ReturnToApp">
                Return to App
            </MudButton>
        } else {
            <MudText Typo="Typo.h5" Class="mb-4">Processing Authorization...</MudText>
            <MudProgressCircular Indeterminate />
        }
    </MudPaper>
</MudContainer>

@code {
    bool success;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        base.OnAfterRender(firstRender);
        if (!firstRender)
            return;

        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        await SpotifyClientScoped.ExchangeCodeForTokenAsync(uri);
    }

    protected override async Task OnInitializedAsync() {
        SpotifyClientScoped.UserChanged += AuthenticationSuccessful;
        await base.OnInitializedAsync();
    }

    async void AuthenticationSuccessful(object _ = null) {
        SpotifyClientScoped.UserChanged -= AuthenticationSuccessful;
        success = true;
        await InvokeAsync(StateHasChanged);
    }

    void ReturnToApp() {
        Navigation.NavigateTo("/");
    }

    public void Dispose() {
        SpotifyClientScoped.UserChanged -= AuthenticationSuccessful;
    }
}