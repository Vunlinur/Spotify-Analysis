// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpotifyAnalysis.Data.Database;

#nullable disable

namespace SpotifyAnalysis.Migrations
{
    [DbContext(typeof(SpotifyContext))]
    [Migration("20251014121835_RemoveImageDTO")]
    partial class RemoveImageDTO
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlbumDTOArtistDTO", b =>
                {
                    b.Property<string>("AlbumsID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArtistsID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlbumsID", "ArtistsID");

                    b.HasIndex("ArtistsID");

                    b.ToTable("AlbumDTOArtistDTO");
                });

            modelBuilder.Entity("ArtistDTOTrackDTO", b =>
                {
                    b.Property<string>("ArtistsID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrackDTOID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ArtistsID", "TrackDTOID");

                    b.HasIndex("TrackDTOID");

                    b.ToTable("ArtistDTOTrackDTO");
                });

            modelBuilder.Entity("PlaylistDTOTrackDTO", b =>
                {
                    b.Property<string>("PlaylistDTOID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TracksID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaylistDTOID", "TracksID");

                    b.HasIndex("TracksID");

                    b.ToTable("PlaylistDTOTrackDTO");
                });

            modelBuilder.Entity("PlaylistDTOUserDTO", b =>
                {
                    b.Property<string>("PlaylistsID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserDTOID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaylistsID", "UserDTOID");

                    b.HasIndex("UserDTOID");

                    b.ToTable("PlaylistDTOUserDTO");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.AlbumDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.ArtistDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("Genres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Popularity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.PlaylistDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Followers")
                        .HasColumnType("int");

                    b.Property<string>("ImageL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapshotID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TracksTotal")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.TrackDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlbumID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DurationMs")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AlbumID");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.UserDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AlbumDTOArtistDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.AlbumDTO", null)
                        .WithMany()
                        .HasForeignKey("AlbumsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyAnalysis.Data.DTO.ArtistDTO", null)
                        .WithMany()
                        .HasForeignKey("ArtistsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistDTOTrackDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.ArtistDTO", null)
                        .WithMany()
                        .HasForeignKey("ArtistsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyAnalysis.Data.DTO.TrackDTO", null)
                        .WithMany()
                        .HasForeignKey("TrackDTOID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaylistDTOTrackDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.PlaylistDTO", null)
                        .WithMany()
                        .HasForeignKey("PlaylistDTOID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyAnalysis.Data.DTO.TrackDTO", null)
                        .WithMany()
                        .HasForeignKey("TracksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaylistDTOUserDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.PlaylistDTO", null)
                        .WithMany()
                        .HasForeignKey("PlaylistsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyAnalysis.Data.DTO.UserDTO", null)
                        .WithMany()
                        .HasForeignKey("UserDTOID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.TrackDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.AlbumDTO", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumID");

                    b.Navigation("Album");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.AlbumDTO", b =>
                {
                    b.Navigation("Tracks");
                });
#pragma warning restore 612, 618
        }
    }
}
