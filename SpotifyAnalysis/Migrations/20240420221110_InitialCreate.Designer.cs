// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpotifyAnalysis.Data.DataAccessLayer;

#nullable disable

namespace SpotifyAnalysis.Migrations
{
    [DbContext(typeof(SpotifyContext))]
    [Migration("20240420221110_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlbumDTOArtistDTO", b =>
                {
                    b.Property<string>("AlbumsID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArtistsID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AlbumsID", "ArtistsID");

                    b.HasIndex("ArtistsID");

                    b.ToTable("AlbumDTOArtistDTO");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.AlbumDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.ArtistDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Genres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("TrackDTOID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("TrackDTOID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.ImageDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlbumDTOID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArtistDTOID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlaylistDTOID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Resolution")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AlbumDTOID");

                    b.HasIndex("ArtistDTOID");

                    b.HasIndex("PlaylistDTOID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.PlaylistDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Followers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDTOID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserDTOID");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.TrackDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlbumID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DurationMs")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaylistDTOID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AlbumID");

                    b.HasIndex("PlaylistDTOID");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.UserDTO", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AlbumDTOArtistDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.AlbumDTO", null)
                        .WithMany()
                        .HasForeignKey("AlbumsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SpotifyAnalysis.Data.DTO.ArtistDTO", null)
                        .WithMany()
                        .HasForeignKey("ArtistsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.ArtistDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.TrackDTO", null)
                        .WithMany("Artists")
                        .HasForeignKey("TrackDTOID");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.ImageDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.AlbumDTO", null)
                        .WithMany("Images")
                        .HasForeignKey("AlbumDTOID");

                    b.HasOne("SpotifyAnalysis.Data.DTO.ArtistDTO", null)
                        .WithMany("Images")
                        .HasForeignKey("ArtistDTOID");

                    b.HasOne("SpotifyAnalysis.Data.DTO.PlaylistDTO", null)
                        .WithMany("Images")
                        .HasForeignKey("PlaylistDTOID");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.PlaylistDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.UserDTO", null)
                        .WithMany("Playlists")
                        .HasForeignKey("UserDTOID");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.TrackDTO", b =>
                {
                    b.HasOne("SpotifyAnalysis.Data.DTO.AlbumDTO", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumID");

                    b.HasOne("SpotifyAnalysis.Data.DTO.PlaylistDTO", null)
                        .WithMany("Tracks")
                        .HasForeignKey("PlaylistDTOID");

                    b.Navigation("Album");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.AlbumDTO", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.ArtistDTO", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.PlaylistDTO", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.TrackDTO", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("SpotifyAnalysis.Data.DTO.UserDTO", b =>
                {
                    b.Navigation("Playlists");
                });
#pragma warning restore 612, 618
        }
    }
}
