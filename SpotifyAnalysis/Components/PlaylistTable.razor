@using System.IO;
@using System.Linq;
@using Data.DTO
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

@inject ProtectedLocalStorage localStorage


<MudDataGrid T="PlaylistDTO" Items="@Playlists" MultiSelection FixedHeader
			 SortMode="SortMode.Multiple" QuickFilter=@Filter SelectedItems="selectedPlaylists" SelectedItemsChanged="@SelectedItemsChanged">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Tracks</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
					  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
	</ToolBarContent>
	<Columns>
		<SelectColumn T="PlaylistDTO" />
		<TemplateColumn Sortable=false>
			<CellTemplate>
				<MudImage Height="50" Width="50" Src=@GetImage(context) />
			</CellTemplate>
		</TemplateColumn>
		<PropertyColumn Property="x => x.Name" Title="Name" />
		<PropertyColumn Property="x => x.OwnerName" Title="Owner" CellStyle="color: grey" />
		<PropertyColumn Property="x => x.TracksTotal" Title="Tracks" HeaderStyle="width:100px" />
	</Columns>
</MudDataGrid>

<style>
	@*MudDataGrid Style and Class parameters affect different element than Width - which is actually the one we need - hence this hack
	3/4 * main AppBar + 4/4 * playlist AppBar + 4/4 DataGrid filter bar (each 64px)*@
	.mud-table-container {
		max-height: calc(100vh - (var(--mud-appbar-height) * 11 / 4));
	}
</style>

@code {
	[Parameter, EditorRequired]
	public IEnumerable<PlaylistDTO> Playlists { get; set; }
	[Parameter, EditorRequired]
	public Action<int> SelectionChanged { get; set; }
	[Parameter, EditorRequired]
	public string Name { get; set; }

	string searchString;
	Storage<IEnumerable<string>> selectionStorage;
	HashSet<PlaylistDTO> selectedPlaylists;


	protected override void OnInitialized() {
		base.OnInitialized();
		selectionStorage = new(Name + "PlaylistTableSelection", localStorage);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender) {
		await base.OnAfterRenderAsync(firstRender);
		if (!firstRender)
			return;

		var selectedIDs = await selectionStorage.Get();
		if (selectedIDs is not null && selectedIDs.Any()) {
			selectedPlaylists = Playlists.Where(i => selectedIDs.Contains(i.ID)).ToHashSet();
			StateHasChanged();
		}
	}

	public IEnumerable<PlaylistDTO> GetSelectedPlaylists() => selectedPlaylists;

	async void SelectedItemsChanged(HashSet<PlaylistDTO> items) {
		selectedPlaylists = items;
		await selectionStorage.Set(items.Select(p => p.ID));
		SelectionChanged?.Invoke(items.Count);
	}

	bool Filter(PlaylistDTO p) {
		if (string.IsNullOrWhiteSpace(searchString))
			return true;

		if (p.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (p.TracksTotal.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	}
	
	string GetImage(CellContext<PlaylistDTO> c) => c.Item.Images.FirstOrDefault()?.Url ?? StaticResourceMap.UnknownPlaylist;
}
