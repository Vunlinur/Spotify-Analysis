@namespace SpotifyAnalysis.Components
@inherits LayoutComponentBase

@using SpotifyAnalysis.Data.DTO
@using SpotifyAnalysis.Data.SpotifyAPI

@inject SpotifyMudTheme SpotifyTheme
@inject ScopedData appState
@inject SpotifyClientScoped clientScoped
@inject NavigationManager navigationManager

<MudThemeProvider IsDarkMode=true Theme="SpotifyTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Color="Color.Primary" Fixed="true" Dense=true Elevation ="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudSpacer />
        <MudButtonGroup Variant=Variant.Outlined Style="--mud-default-borderradius: 9999px">
            <UserAvatar OnClick=@(_ => navigationManager.NavigateTo("/")) Descriptor="inspecting:" UserContainer=@appState DefaultText="No user selected" />
            <UserAvatar OnClick=clientScoped.InitializeSpotifyClient Descriptor="as:" UserContainer=@clientScoped DefaultText="Not logged in" />
        </MudButtonGroup>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/Vunlinur/Spotify-Analysis" Target="_blank" />
    </MudAppBar>
    <MudDrawer Breakpoint=Breakpoint.Sm ClipMode=DrawerClipMode.Always
               Variant="@DrawerVariant.Mini" OpenMiniOnHover="true" @bind-Open="@open">
        <NavMenu></NavMenu>
    </MudDrawer>

    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>


@code {
    private bool open = true;
    private void ToggleDrawer() => open = !open;

    bool UserLoaded { get => !string.IsNullOrEmpty(appState?.UserDTO?.ID); }
    bool Home { get => string.IsNullOrEmpty(navigationManager.ToBaseRelativePath(navigationManager.Uri)); }

    protected override async Task OnInitializedAsync() {
        if (!UserLoaded && !Home)
            navigationManager.NavigateTo("/");
        await base.OnInitializedAsync();
    }
}