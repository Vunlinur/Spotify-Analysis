@namespace SpotifyAnalysis.Components

@using SpotifyAnalysis.Data
@using ApexCharts

@inherits ChartBase


<MudItemBase>
    <MudText Typo="Typo.h6">@Title</MudText>
    <ApexChart TItem="Element"
                Options="options"
                OnDataPointSelection=OnDataPointSelection
                OnLegendClicked=OnLegendClicked
                @ref="chart">

        <ApexPointSeries TItem="Element"
                            Items="series"
                            SeriesType="SeriesType.Donut"
                            XValue="@(e => e.Label)"
                            YValue="@(e => e.Quantity)"/>
    </ApexChart>
</MudItemBase>


@code {
    private Element[] series { get; set; }

    private ApexChartOptions<Element> options { get; } = new ApexChartOptions<Element> {
        Theme = new Theme {
            Mode = Mode.Dark,
            Palette = PaletteType.Palette5
        },
        Legend = new Legend {
            Width = 250,
            FontSize = "15",
            OnItemClick = new LegendOnItemClick { ToggleDataSeries = true }, // doesn't do anything for pie
            Labels = new LegendLabels { Colors = ["#fff"] }
        },
        PlotOptions = new PlotOptions {
            Pie = new PlotOptionsPie {
                ExpandOnClick = false,
                Donut = new PlotOptionsDonut {
                    Labels = new DonutLabels {
                        Total = new DonutLabelTotal { FontSize = "20px", Color = "#1DB954", Formatter = @"function (w) {return w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)}" },
                        Value = new DonutLabelValue { Color = "#888" }
                    }
                }
            }
        }
    };

    protected string other = "Other";

    protected override void ProcessElements() {
        Elements = Elements.OrderByDescending(e => e.Quantity);   // Descending because of how Mud displays labels. Also Change Append to Prepend

        //MergeBelowDegree(360f);
        MergeAfterTop(100);

        series = Elements.ToArray();
        quantities = series.Select(e => e.Quantity).ToArray();
    }

    protected void MergeBelowDegree(float oneOver) {
        // Any element taking less space of the pie than certain degree gets merged into "Other"
        var allQuantitySum = Elements.Select(e => e.Quantity).Sum();
        var threshold = (int)(allQuantitySum / oneOver); // anything taking less than 1/oneOver degree of the pie
        var sumQuantityBelowThreshold = Elements.Where(e => e.Quantity <= threshold).Select(e => e.Quantity).Sum();
        if (sumQuantityBelowThreshold > 0) {
            Elements = Elements.Where(e => e.Quantity > threshold);
            Elements = Elements.Increase(new Element { Label = other, Quantity = sumQuantityBelowThreshold });
        }
    }

    protected void MergeAfterTop(int topN) {
        // Limit no. of items to topN for performance reasons, rest goes into "Other"
        int leastImportantElementsCount = Math.Max(Elements.Count() - topN, 0);
        if (leastImportantElementsCount > 0) {
            var sumQuantityExceedRows = Elements.TakeLast(leastImportantElementsCount).Select(e => e.Quantity).Sum();
            Elements = Elements.SkipLast(leastImportantElementsCount);
            Elements = Elements.Increase(new Element { Label = other, Quantity = sumQuantityExceedRows });
        }
    }

    bool legendClicked = false;
    /**
     * A hack to distinguish whether the clicks are coming from the legend or from the chart:
     * https://github.com/apexcharts/Blazor-ApexCharts/issues/442
     */
    private void OnLegendClicked(LegendClicked<Element> data) {
        legendClicked = true;
    }

    int[] quantities;
    protected async void OnDataPointSelection(SelectedData<Element> selection) {
        if (OnClickCallback is null)
            return;

        if (legendClicked) {
            int index = selection.DataPointIndex;
            var serie = series[index];
            serie.Quantity = serie.Quantity == 0 ? quantities[index] : 0;
            await chart.UpdateSeriesAsync();
        }
        else
            OnClickCallback?.Invoke(selection.DataPoint.Items.First());
        
        legendClicked = false;
    }
}
