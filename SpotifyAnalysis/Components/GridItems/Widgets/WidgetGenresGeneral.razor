@namespace SpotifyAnalysis.Components

@inherits WidgetBase

@using Data.DTO
@using SpotifyAnalysis.Data
@using static SpotifyAnalysis.Components.MudItemTracksPane.Column

@if (elements is not null) {
    @CreateChart(typeof(MudItemPieChart))
    <MudItemTracksPane Tracks=@selectedTracks TitleSuffix=@genreName ShowColumns="Name|Artists|Genres" />
}

@code {
    [Parameter, EditorRequired]
    public IEnumerable<TrackDTO> Tracks { get; set; }
    [Parameter, EditorRequired]
    public IDictionary<string, ArtistDTO> ArtistsDict { get; set; }
    public override string Title { get; } = "Genres General";

    static readonly string[] excludes = { "of", "and", "new", "music" };
    protected override Elements BuildElements() {
        if (Tracks is null) return new Elements();

        var genres = new Elements();
        foreach (var track in Tracks)
            foreach (var artist in track.Artists)
                foreach (var genre in ArtistsDict[artist.ID].Genres)
                    foreach (string word in genre.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries))
                        genres.Increase(new Element { Label = word, Quantity = 1 });
        foreach (var exclusion in excludes)
            genres.Extract(exclusion);
        return genres;
    }

    public WidgetGenresGeneral() {
        onClickCallback = FindGenreTracks;
    }

    string genreName;
    IEnumerable<TrackDTO> selectedTracks;
    void FindGenreTracks(Element element) {
        genreName = element.Label;
        var genreArtists = ArtistsDict.Select(a => a.Value).Where(a => a.Genres.Any(g => g.Contains(genreName)));
        selectedTracks = Tracks.Where(t => t.Artists.Intersect(genreArtists).Any());
        StateHasChanged();
    }
}
