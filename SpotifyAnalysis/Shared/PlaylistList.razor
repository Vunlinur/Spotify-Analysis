@using System.IO;
@using System.Linq;
@using SpotifyAPI.Web


<div class="margins">
	<h2>Available playlists</h2>
</div>
<div>
	<table class="table-container">
		<thead>
			<tr>
				<th style="width:40px" @onclick='(e => SortTable(b => b.Index, "#"))'>
					#
					<span>@GetSortIndicator("#")</span>
				</th>
				<th style="width:400px" @onclick='(e => SortTable(b => b.Data.Name, "Name"))'>
					Name
					<span>@GetSortIndicator("Name")</span>
				</th>
				<th style="width:80px" @onclick='(e => SortTable(b => b.Data.Tracks.Total, "Tracks"))'>
					Tracks
					<span>@GetSortIndicator("Tracks")</span>
				</th>
			</tr>
		</thead>
		<tbody>
			@if (playlists != null) {
				int count = playlists.Count;
				foreach (var playlist in playlists) {
					<tr class="@playlist.Class" @onclick='(e) => ToggleSelect(playlist)'>
						<td>@playlist.Index</td>
						<td>@playlist.Data.Name</td>
						<td>@playlist.Data.Tracks.Total</td>
					</tr>
				}
			}
		</tbody>
	</table>
</div>

@code {
	private const string Select = "select";

	[Parameter]
	public IEnumerable<SimplePlaylist> Playlists { get; set; }
	[Parameter]
	public bool MultiSelect { get; set; }

	private List<Playlist> playlists;

	internal class Playlist {
		public string Class;
		public int Index;
		public SimplePlaylist Data;

		public Playlist(SimplePlaylist playlist, int index) {
			Data = playlist;
			Index = index;
		}
	}

	protected override async Task OnInitializedAsync() {
		int index = 1;
		playlists = Playlists.Select(x => new Playlist(x, index++)).ToList();
	}

	public IEnumerable<SimplePlaylist> GetSelectedPlaylists() {
		return playlists
			.Where(p => p.Class == Select)
			.Select(p => p.Data);
	}

	internal void ToggleSelect(Playlist playlist) {
		if (!MultiSelect)
			playlists.ForEach(p => p.Class = "");
		playlist.Class = string.IsNullOrEmpty(playlist.Class) ? Select : "";
	}

	public void DeselectAll() {
		playlists.ForEach(b => b.Class = "");
	}

	string lastSortColumn;
	bool sortAscending;
	internal void SortTable<TKey>(Func<Playlist, TKey> keySelector, string sortColumn) {
		if (sortColumn == lastSortColumn) {
			playlists.Reverse();
			sortAscending = !sortAscending;
		}
		else {
			playlists = playlists.OrderBy(keySelector).ToList();
			sortAscending = true;
			lastSortColumn = sortColumn;
		}
	}

	internal string GetSortIndicator(string columnName) {
		if (columnName != lastSortColumn)
			return string.Empty;
		return sortAscending ? "▲" : "▼";
	}
}
