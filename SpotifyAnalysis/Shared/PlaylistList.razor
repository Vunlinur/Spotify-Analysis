@using System.IO;
@using System.Linq;
@using SpotifyAPI.Web


<div class="pane" style="width: 520px">
	<div class="playlist-selector">
		<label style="width:300px; text-align:center">@playlists.Where(p => p.Class == Select).Count() / @playlists.Count() playlists selected</label>
		@if (MultiSelect) {
			<button class="btn btn-primary" @onclick="SelectAll">All</button>
			<button class="btn btn-primary" @onclick="DeselectAll">None</button>
		}
		<button class="btn btn-primary" @onclick="(e => expanded = !expanded)">Show</button>
	</div>
	@if (expanded) {
		<div class="scrollable playlist-list">
			<table>
				<thead>
					<tr>
						<th style="width:70px" @onclick='(e => SortTable(b => b.Index, "#"))'>
							#
							<span>@GetSortIndicator("#")</span>
						</th>
						<th style="width:400px" @onclick='(e => SortTable(b => b.Data.Name, "Name"))'>
							Name
							<span>@GetSortIndicator("Name")</span>
						</th>
						<th style="width:100px" @onclick='(e => SortTable(b => b.Data.Tracks.Total, "Tracks"))'>
							Tracks
							<span>@GetSortIndicator("Tracks")</span>
						</th>
					</tr>
				</thead>
				<tbody>
					@if (playlists != null) {
						foreach (var playlist in playlists) {
							<tr class="@playlist.Class" @onclick='(e) => ToggleSelect(playlist)'>
								<td>@playlist.Index</td>
								<td class="bright">@playlist.Data.Name</td>
								<td>@playlist.Data.Tracks.Total</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
	}
</div>


@code {
	private const string Select = "select";

	[Parameter]
	public IEnumerable<FullPlaylist> Playlists { get; set; }
	[Parameter]
	public bool MultiSelect { get; set; }
	[Parameter]
	public Action<bool> SelectionChanged { get; set; }

	private List<Playlist> playlists;
	private bool expanded;

	internal class Playlist {
		public string Class;
		public int Index;
		public FullPlaylist Data;

		public Playlist(FullPlaylist playlist, int index) {
			Data = playlist;
			Index = index;
		}
	}

	protected override async Task OnInitializedAsync() {
		int index = 1;
		playlists = Playlists.Select(x => new Playlist(x, index++)).ToList();
	}

	public IEnumerable<FullPlaylist> GetSelectedPlaylists() {
		return playlists
			.Where(p => p.Class == Select)
			.Select(p => p.Data);
	}

	internal void ToggleSelect(Playlist playlist) {
		if (!MultiSelect)
			playlists.ForEach(p => p.Class = "");
		playlist.Class = string.IsNullOrEmpty(playlist.Class) ? Select : "";

		SelectionChanged?.Invoke(playlists.Any(p => p.Class == Select));
	}

	public void SelectAll() {
		playlists.ForEach(b => b.Class = Select);
		SelectionChanged?.Invoke(true);
	}

	public void DeselectAll() {
		playlists.ForEach(b => b.Class = "");
		SelectionChanged?.Invoke(false);
	}

	string lastSortColumn;
	bool sortAscending;
	internal void SortTable<TKey>(Func<Playlist, TKey> keySelector, string sortColumn) {
		if (sortColumn == lastSortColumn) {
			playlists.Reverse();
			sortAscending = !sortAscending;
		}
		else {
			playlists = playlists.OrderBy(keySelector).ToList();
			sortAscending = true;
			lastSortColumn = sortColumn;
		}
	}

	internal string GetSortIndicator(string columnName) {
		if (columnName != lastSortColumn)
			return string.Empty;
		return sortAscending ? "▲" : "▼";
	}
}
