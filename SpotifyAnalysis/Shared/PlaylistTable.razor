@using System.IO;
@using System.Linq;
@using Data.DTO


<MudDataGrid T="PlaylistDTO" Items="@Playlists" MultiSelection FixedHeader
			 SortMode="SortMode.Multiple" QuickFilter=@Filter SelectedItemsChanged="@SelectedItemsChanged">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Tracks</MudText>
		<MudSpacer />
		<MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
					  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
	</ToolBarContent>
	<Columns>
		<SelectColumn T="PlaylistDTO" />
		<TemplateColumn Sortable=false>
			<CellTemplate>
				<MudImage Height="50" Width="50" Src=@GetImage(context) />
			</CellTemplate>
		</TemplateColumn>
		<PropertyColumn Property="x => x.Name" Title="Name" />
		<PropertyColumn Property="x => x.OwnerName" Title="Owner" CellStyle="color: grey" />
		<PropertyColumn Property="x => x.TracksTotal" Title="Tracks" HeaderStyle="width:100px" />
	</Columns>
</MudDataGrid>

<style>
	@*MudDataGrid Style and Class affect different element than Width - which is actually the one we need - hence this hack
	3/4 * main AppBar + 4/4 * playlist AppBar + 4/4 DataGrid filter bar (each 64px)*@
	.mud-table-container {
		max-height: calc(100vh - (var(--mud-appbar-height) * 11 / 4));
	}
</style>

@code {
	[Parameter]
	public IEnumerable<PlaylistDTO> Playlists { get; set; }
	[Parameter]
	public Action<int> SelectionChanged { get; set; }

	string _searchString;
	HashSet<PlaylistDTO> _items;

	public IEnumerable<PlaylistDTO> GetSelectedPlaylists() => _items;

	void SelectedItemsChanged(HashSet<PlaylistDTO> items) {
		_items = items;
		SelectionChanged?.Invoke(items.Count);
	}

	bool Filter(PlaylistDTO p) {
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;

		if (p.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		if (p.TracksTotal.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;

		return false;
	}
	
	internal string GetImage(CellContext<PlaylistDTO> c) => c.Item.Images.FirstOrDefault()?.Url ?? StaticResourceMap.UnknownPlaylist;
}
