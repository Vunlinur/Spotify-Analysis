@namespace SpotifyAnalysis.Shared
@implements IDisposable

@using SpotifyAnalysis.Data.DTO

@inject ScopedData scope;

<MudNavMenu>
    <MudNavLink Href="/" Icon=@Icons.Material.Filled.PersonOutline Match="NavLinkMatch.All">Select user</MudNavLink>
    <MudNavLink Href="charts" Icon=@Icons.Material.Filled.PieChartOutline Disabled=@Disabled()>Playlist charts</MudNavLink>
    <MudNavLink Href="browsetracks" Icon=@Icons.Material.Filled.TableChart Disabled=@Disabled()>Browse tracks</MudNavLink>
    <MudNavLink Href="duplicates" Icon=@Icons.Material.Filled.ContentCopy Disabled=@Disabled()>Duplicates</MudNavLink>
</MudNavMenu>

<style>
    .mud-nav-link {
        font-size: large;
        height: 70px;
    }
</style>

@code {
    protected override void OnInitialized() {
        base.OnInitialized();
        scope.UserChanged += Refresh;
    }

    public void Dispose() => scope.UserChanged -= Refresh;

    async void Refresh(object _) => await InvokeAsync(StateHasChanged);

    bool Disabled() => scope.UserDTO is null;
}