@namespace SpotifyAnalysis.Shared

@inherits WidgetBase

@using Data.DTO
@using SpotifyAnalysis.Data

@if (elements is not null) {
    @CreateChart()
    <MudItemTracksPane Tracks=@genreTracks TitleSuffix=@genreName />
}

@code {
    [Parameter, EditorRequired]
    public IEnumerable<TrackDTO> Tracks { get; set; }
    [Parameter, EditorRequired]
    public IDictionary<string, ArtistDTO> ArtistsDict { get; set; }
    public override string Title { get; } = "Genres";

    protected override Elements BuildElements() {
        if (Tracks is null) return new Elements();

        var genres = new Elements();
        foreach (var track in Tracks)
            foreach (var artist in track.Artists)
                foreach (var genre in ArtistsDict[artist.ID].Genres)
                    genres.Increase(new Element { Label = genre, Quantity = 1 });
        return genres;
    }

    public WidgetGenres() {
        onClickCallback = FindGenreTracks;
    }

    string genreName;
    IEnumerable<TrackDTO> genreTracks;
    void FindGenreTracks(Element element) {
        genreName = element.Label;
        var genreArtists = ArtistsDict.Select(a => a.Value).Where(a => a.Genres.Contains(genreName));
        genreTracks = Tracks.Where(t => t.Artists.Intersect(genreArtists).Any());
        StateHasChanged();
    }
}
