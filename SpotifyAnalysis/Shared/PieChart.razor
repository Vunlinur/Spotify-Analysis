@using System.Linq
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Interop
@using SpotifyAnalysis.Data

<Chart Config="_config"></Chart>


@code {
	[Parameter]
	public string Title { get; set; }
	[Parameter]
	public IEnumerable<Element> Elements { get; set; }

	private PieConfig _config;

	protected override void OnInitialized() {
		_config = new PieConfig {
			Options = new PieOptions {
				CutoutPercentage = 30,
				Responsive = true,
				Title = new OptionsTitle {
					Display = true,
					Text = Title
				},
				Legend = new Legend() {
					Position = Position.Left,
					Reverse = true
				}
			}
		};

		Elements = Elements.OrderBy(e => e.Quantity);
		// Any element with arbitrary low Quantity gets merged into one bit "Other"
		var allQuantitySum = Elements.Select(e => e.Quantity).Sum();
		var threshold = (int) (allQuantitySum / 220f);
		var sumQuantityBelowThreshold = Elements.Where(e => e.Quantity <= threshold).Select(e => e.Quantity).Sum();
		Elements = Elements.Where(e => e.Quantity > threshold);
		Elements = Elements.Prepend(new Element { Label = "Other", Quantity = sumQuantityBelowThreshold });

		Random random = new Random();
		foreach (var element in Elements)
			_config.Data.Labels.Add(element.Label);
		PieDataset<int> dataset = new PieDataset<int>(Elements.Select(e => e.Quantity)) {
			BackgroundColor = Elements.Select(e => e.Color ?? RandomColor()).ToArray()
		};
		_config.Data.Datasets.Add(dataset);

		string RandomColor() {
			return ColorUtil.ColorHexString(
				(byte)random.Next(0, 255),
				(byte)random.Next(0, 255),
				(byte)random.Next(0, 255)
			);
		}
	}

}
