@using System.Linq
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Handlers
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Interop
@using SpotifyAnalysis.Data
@using Newtonsoft.Json.Linq

<div id="wrapper" style="position: relative; height: 515px; width: 900px ">
	<Chart Config="_config"></Chart>
</div>

@code {
	[Parameter]
	public string Title { get; set; }
	[Parameter]
	public IEnumerable<Element> Elements { get; set; }
	[Parameter]
	public Action<string> OnClickCallback { get; set; }

	private PieConfig _config;

	protected override void OnInitialized() {
		_config = new PieConfig {
			Options = new PieOptions {
				CutoutPercentage = 40,
				Responsive = true,
				MaintainAspectRatio = false,
				Title = new OptionsTitle {
					Display = true,
					Text = Title
				},
				Legend = new Legend() {
					Position = Position.Left,
					Labels = new LegendLabels { UsePointStyle = true },
					Reverse = true
				},
				OnClick = OnClickCallback is null ? null : new DelegateHandler<ChartMouseEvent>(OnClickHandler)
			}
		};

		Elements = Elements.OrderBy(e => e.Quantity);

		// Any element with arbitrary low Quantity gets merged into one bit "Other"
		var allQuantitySum = Elements.Select(e => e.Quantity).Sum();
		var threshold = (int) (allQuantitySum / 220f);
		var sumQuantityBelowThreshold = Elements.Where(e => e.Quantity <= threshold).Select(e => e.Quantity).Sum();
		if (sumQuantityBelowThreshold > 0) {
			Elements = Elements.Where(e => e.Quantity > threshold);
			Elements = Elements.Prepend(new Element { Label = "Other", Quantity = sumQuantityBelowThreshold });
		}

		// Limit no. of legend items to 3 columns, otherwise the pie does not fit
		int leastImportantElementsCount = Math.Max(Elements.Count() - 22 * 2, 0);
		if (leastImportantElementsCount > 0) {
			var sumQuantityExceedRows = Elements.Take(leastImportantElementsCount).Select(e => e.Quantity).Sum();
			Elements = Elements.Skip(leastImportantElementsCount);
			Elements = Elements.Prepend(new Element { Label = "Other", Quantity = sumQuantityExceedRows });
		}

		var colorFactory = new RotateHue(1.333, 150);
		foreach (var element in Elements)
			_config.Data.Labels.Add(element.Label);
		PieDataset<int> dataset = new PieDataset<int>(Elements.Select(e => e.Quantity)) {
			BackgroundColor = Elements.Select(e => e.Color ?? colorFactory.Next()).ToArray()
		};
		_config.Data.Datasets.Add(dataset);
	}

	public void OnClickHandler(JObject mouseEvent, JArray activeElements) {
		// This stops working when charts get more pieces...
		string clickedLabel = activeElements[0]["_view"]["label"].ToString();
		OnClickCallback(clickedLabel);
	}
}
