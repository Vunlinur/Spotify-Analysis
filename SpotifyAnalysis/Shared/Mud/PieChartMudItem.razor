@namespace SpotifyAnalysis.Shared
@using MudBlazor
@using SpotifyAnalysis.Data

<MudItem lg="4" md="6">
    <MudPaper Class="pa-4">
        <MudChart
            ChartType=ChartType.Pie
            InputData=@data
            InputLabels=@labels
            @bind-SelectedIndex=Index
            ChartOptions=chartOptions
            Width="400px" Height="400px" />
    </MudPaper>
</MudItem>

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public IEnumerable<Element> Elements { get; set; }
    [Parameter]
    public Action<string> OnClickCallback { get; set; }

    double[] data;
    string[] labels;
    ChartOptions chartOptions;
    int index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int Index {
        get { return index; }
        set {
            index = value;
            OnClickCallback?.Invoke(labels[index]);
        }
    }

    protected override void OnInitialized() {
        Elements = Elements.OrderByDescending(e => e.Quantity);   // Descending because of how Mud displays labels. Also Change Append to Prepend

        // Any element with arbitrary low Quantity gets merged into one bit "Other"
        var allQuantitySum = Elements.Select(e => e.Quantity).Sum();
        var threshold = (int)(allQuantitySum / 220f);
        var sumQuantityBelowThreshold = Elements.Where(e => e.Quantity <= threshold).Select(e => e.Quantity).Sum();
        if (sumQuantityBelowThreshold > 0) {
            Elements = Elements.Where(e => e.Quantity > threshold);
            Elements = Elements.Append(new Element { Label = "Other", Quantity = sumQuantityBelowThreshold });
        }

        // Limit no. of legend items to 3 columns, otherwise the pie does not fit
        int leastImportantElementsCount = Math.Max(Elements.Count() - 22 * 2, 0);
        if (leastImportantElementsCount > 0) {
            var sumQuantityExceedRows = Elements.Take(leastImportantElementsCount).Select(e => e.Quantity).Sum();
            Elements = Elements.Skip(leastImportantElementsCount);
            Elements = Elements.Append(new Element { Label = "Other", Quantity = sumQuantityExceedRows });
        }

        data = Elements.Select(e => (double)e.Quantity).ToArray();
        labels = Elements.Select(e => e.Label).ToArray();

        //var colorFactory = new RotateHue(1.333, 200);
        //string[] chartPalette = Elements.Select(e => e.Color ?? colorFactory.Next()).ToArray();
        chartOptions = new ChartOptions {
     //       ChartPalette = chartPalette
        };
    }
}
