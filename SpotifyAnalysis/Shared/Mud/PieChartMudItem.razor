@namespace SpotifyAnalysis.Shared
@using SpotifyAnalysis.Data
@using ApexCharts

@*
    Currently it is impossible to distinguish whether the clicks are coming from the legend or from the chart:
    https://github.com/apexcharts/Blazor-ApexCharts/issues/442
    https://github.com/apexcharts/Blazor-ApexCharts/issues/464
    So the solution is to toggle data series by default, but if callback is provided, we show a switch
    to call that callback instead.
*@

<MudItem xxl="4" xl="6" lg="12">
    <MudPaper Class="pa-4">
        <MudInputLabel Class="mudItemTitle">@Title</MudInputLabel>
        <ApexChart TItem="Element"
                   Options="options"
                   OnDataPointSelection=OnDataPointSelection
                   @ref="chart">

            <ApexPointSeries TItem="Element"
                             Items="series"
                             SeriesType="SeriesType.Donut"
                             XValue="@(e => e.Label)"
                             YValue="@(e => e.Quantity)"/>
        </ApexChart>

        @if (OnClickCallback is not null) {
            <MudStack Row=true Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudInputLabel >Toggle series</MudInputLabel>
                <MudSwitch @bind-Value="@invokeCallback" Color="MudBlazor.Color.Primary" Size="MudBlazor.Size.Small" />
                <MudInputLabel>Get details</MudInputLabel>
            </MudStack>
        }
    </MudPaper>
</MudItem>

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public IEnumerable<Element> Elements { get; set; }
    private Element[] series { get; set; }
    [Parameter]
    public Action<string> OnClickCallback { get; set; }

    private ApexChart<Element> chart;
    private ApexChartOptions<Element> options { get; } = new ApexChartOptions<Element> {
        Title = new Title {
            Align = ApexCharts.Align.Center,
                Style = new TitleStyle { Color = "#fff", FontSize = "18px" }
        },
        Legend = new Legend {
            Width = 250,
            FontSize = "15",
            OnItemClick = new LegendOnItemClick { ToggleDataSeries = true }, // doesn't do anything for pie
            Labels = new LegendLabels { Colors = ["#fff"] }
        },
        PlotOptions = new PlotOptions {
            Pie = new PlotOptionsPie {
                ExpandOnClick = false,
                Donut = new PlotOptionsDonut {
                    Labels = new DonutLabels {
                        Total = new DonutLabelTotal { FontSize = "20px", Color = "#1DB954", Formatter = @"function (w) {return w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)}" },
                        Value = new DonutLabelValue { Color = "#888" }
                    }
                }
            }
        }
    };

    public async Task RefreshChartAsync() {
        if (chart is null)
            return;
        ProcessElements();
        await chart.UpdateSeriesAsync(false);
        await chart.UpdateOptionsAsync(false, false, true);
    }

    protected string other = "Other";
    protected override void OnInitialized() {
        ProcessElements();
    }

    protected void ProcessElements() {
        Elements = Elements.OrderByDescending(e => e.Quantity);   // Descending because of how Mud displays labels. Also Change Append to Prepend

        //MergeBelowDegree(360f);
        MergeAfterTop(100);

        series = Elements.ToArray();
        quantities = series.Select(e => e.Quantity).ToArray();
    }

    protected void MergeBelowDegree(float oneOver) {
        // Any element taking less space of the pie than certain degree gets merged into "Other"
        var allQuantitySum = Elements.Select(e => e.Quantity).Sum();
        var threshold = (int)(allQuantitySum / oneOver); // anything taking less than 1/oneOver degree of the pie
        var sumQuantityBelowThreshold = Elements.Where(e => e.Quantity <= threshold).Select(e => e.Quantity).Sum();
        if (sumQuantityBelowThreshold > 0) {
            Elements = Elements.Where(e => e.Quantity > threshold);
            Elements = Elements.Increase(new Element { Label = other, Quantity = sumQuantityBelowThreshold });
        }
    }

    protected void MergeAfterTop(int topN) {
        // Limit no. of items to topN for performance reasons, rest goes into "Other"
        int leastImportantElementsCount = Math.Max(Elements.Count() - topN, 0);
        if (leastImportantElementsCount > 0) {
            var sumQuantityExceedRows = Elements.TakeLast(leastImportantElementsCount).Select(e => e.Quantity).Sum();
            Elements = Elements.SkipLast(leastImportantElementsCount);
            Elements = Elements.Increase(new Element { Label = other, Quantity = sumQuantityExceedRows });
        }
    }

    int[] quantities;
    bool invokeCallback = true;
    protected async void OnDataPointSelection(SelectedData<Element> selection) {
        if (OnClickCallback is not null && invokeCallback)
            OnClickCallback?.Invoke(selection.DataPoint.X.ToString());
        else {
            int index = selection.DataPointIndex;
            var serie = series[index];
            serie.Quantity = serie.Quantity == 0 ? quantities[index] : 0;
            await chart.UpdateSeriesAsync();
        }
    }
}
